/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 11.12.2022 17:08:44

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 3440;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[26];
TfLiteEvalTensor tflEvalTensors[26];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[12];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,1300 } };
const TfArray<1, float> quant0_scale = { 1, { 0.037322930991649628, } };
const TfArray<1, int> quant0_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 100, 13, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 100, 1, 8, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 50, 8, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 50, 1, 16, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data5[2] = { -1, 400, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data6[8*1*3*13] = { 
  /* [0][0][][] */ -81,43,-101,80,89,-53,25,86,48,-106,-5,90,11, 121,-61,-127,-37,-4,-3,-60,-92,31,-9,69,111,86, -122,-17,-38,-73,-77,58,-69,-52,77,14,-88,-72,-26, 
  /* [1][0][][] */ 49,57,-69,-20,-9,-10,45,-76,-46,67,57,-94,105, 85,21,35,50,-33,12,-7,-79,27,-78,-127,78,72, 41,38,-112,114,-61,-101,9,-48,-45,-89,-17,-11,5, 
  /* [2][0][][] */ 32,-68,-73,97,-100,-96,-102,75,-65,-78,17,127,78, 65,-46,-97,32,14,-49,69,-61,-3,-2,53,-30,-5, 33,-78,-62,-1,-61,12,83,-80,-51,39,-46,-39,53, 
  /* [3][0][][] */ -127,87,-60,93,112,-79,-7,108,4,42,13,46,18, 96,83,-96,7,25,-72,-35,42,84,111,-66,64,23, -23,-40,-56,57,41,14,-24,-40,-34,49,-50,89,1, 
  /* [4][0][][] */ 43,-3,-60,33,127,-77,15,39,-92,23,28,59,13, 103,-22,-65,-7,-58,-51,-22,65,9,35,-71,23,43, 26,-70,112,-121,12,-107,113,-22,-100,-71,110,92,-65, 
  /* [5][0][][] */ 93,-28,66,10,36,-33,-19,-64,18,-70,-21,9,122, 22,-65,54,46,111,-76,97,-5,9,72,-40,-14,-36, 127,-75,-3,30,110,18,-63,-5,-70,82,3,-55,-27, 
  /* [6][0][][] */ -71,-83,-96,-96,-3,-37,117,54,-42,94,-56,22,-9, -15,29,45,20,-23,-18,-54,-34,11,17,92,-31,-77, -66,-24,110,-88,-100,-108,-47,127,16,90,43,-107,-84, 
  /* [7][0][][] */ -54,-82,-12,50,17,-54,-79,44,25,55,-112,-17,24, 116,-31,50,-96,-1,109,-115,74,-1,102,67,116,73, -59,-119,127,66,-94,14,21,-95,-17,-43,70,-17,43, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,3,13 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0026291843969374895, 0.0025743904989212751, 0.0028662590775638819, 0.0031957798637449741, 0.0028817798011004925, 0.0029499582014977932, 0.0029689052607864141, 0.002839947585016489, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { -511, -490, -1013, 106, 309, 767, 173, 303, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 9.8128868557978421e-05, 9.6083800599444658e-05, 0.00010697718971641734, 0.00011927587183890864, 0.00010755646508187056, 0.00011010108573827893, 0.00011080824333475903, 0.00010599516826914623, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[16*1*3*8] = { 
  /* [0][0][][] */ -49,-55,-75,127,-24,-83,99,-63, 119,-20,-87,-21,1,-61,21,-36, 98,-54,101,66,100,115,85,30, 
  /* [1][0][][] */ -62,98,-70,-38,17,-24,42,-12, -50,-43,-51,60,-30,31,-2,-35, 81,80,21,127,72,-6,-72,4, 
  /* [2][0][][] */ -126,86,-93,-106,38,127,-62,-122, 92,0,-40,124,57,-50,-85,87, -15,-98,-49,-70,57,58,92,4, 
  /* [3][0][][] */ -96,40,-3,12,-9,94,-4,92, -23,-29,21,127,72,113,112,-39, -8,-68,40,30,-13,106,72,-39, 
  /* [4][0][][] */ 47,32,90,0,41,-70,-51,99, -93,-12,17,-44,-63,-88,23,127, 122,-93,102,85,-99,114,-105,121, 
  /* [5][0][][] */ 38,-52,-80,29,80,127,55,123, -51,-66,-69,40,57,89,-26,-30, -42,-5,41,-6,58,34,-49,63, 
  /* [6][0][][] */ 91,62,85,127,9,27,-103,64, 34,54,36,-81,0,80,-40,-110, -32,112,-35,-33,57,-80,-43,-42, 
  /* [7][0][][] */ -56,-86,39,-30,-38,127,69,52, 46,-106,-80,31,106,88,92,-83, -89,-90,-74,-7,67,24,-56,111, 
  /* [8][0][][] */ -72,-1,64,-37,-48,-25,-10,127, -19,-32,-80,101,43,52,64,68, -36,-78,12,-82,-33,-50,77,45, 
  /* [9][0][][] */ -80,-69,4,-40,85,106,-111,3, -50,127,90,-101,33,59,98,-46, -79,20,91,29,57,12,37,20, 
  /* [10][0][][] */ -5,20,68,-3,40,-80,-41,12, 85,6,18,19,127,46,109,-96, 7,5,-24,-67,-17,-44,125,-24, 
  /* [11][0][][] */ 20,-81,-6,80,-53,-115,86,17, -58,47,62,-62,-70,-8,28,102, 57,-40,-105,54,105,-72,127,93, 
  /* [12][0][][] */ 39,-10,-127,-38,22,62,48,-69, -25,-19,84,-8,53,-73,65,51, 1,21,-55,-58,-15,55,20,45, 
  /* [13][0][][] */ 0,14,-62,105,-88,-83,8,-105, -74,-31,32,-19,70,24,-58,-84, -47,-70,-37,127,-17,27,123,-35, 
  /* [14][0][][] */ 6,56,114,50,-85,121,-66,-104, 32,103,-72,16,120,12,29,-8, -61,127,91,-86,-13,76,13,10, 
  /* [15][0][][] */ 89,35,-49,64,-93,-105,-125,-56, -16,28,-28,-117,103,78,88,-5, 81,-96,54,-127,-13,65,-85,35, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant8_scale = { 16, { 0.0027102089952677488, 0.0030566386412829161, 0.0021023694425821304, 0.0029149935580790043, 0.0022642647381871939, 0.0030968114733695984, 0.0026610672939568758, 0.0025606821291148663, 0.0028885514475405216, 0.0026809086557477713, 0.0028310755733400583, 0.0023983437567949295, 0.0029780019540339708, 0.0023827077820897102, 0.0025092395953834057, 0.0023259411100298166, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[16] = { 652, -145, -127, 307, -240, 800, -36, 691, 300, 842, 359, -436, -141, 1191, 147, -83, };
const TfArray<1, int> tensor_dimension9 = { 1, { 16 } };
const TfArray<16, float> quant9_scale = { 16, { 6.3272535044234246e-05, 7.1360285801347345e-05, 4.9081914767157286e-05, 6.805343582527712e-05, 5.2861523727187887e-05, 7.2298156737815589e-05, 6.2125276599545032e-05, 5.9781683376058936e-05, 6.7436121753416955e-05, 6.2588493165094405e-05, 6.6094289650209248e-05, 5.5991731642279774e-05, 6.9524430728051811e-05, 5.5626693210797384e-05, 5.8580706536304206e-05, 5.4301421187119558e-05, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[16*400] = { 
  -35, -16, -6, -55, 22, -61, -3, 19, -17, -41, -43, -17, 19, 12, 31, 2, -1, 60, -61, -1, -27, -70, 14, -65, -73, 17, 47, -67, 27, 11, -23, -73, 36, -55, 26, -63, -34, -41, -33, -55, -35, -11, -44, -33, 11, -29, 42, 15, -19, 56, 42, 14, -71, -16, 43, 0, -50, -15, -42, 41, -76, -15, -47, -34, 37, -57, -27, 2, -16, 32, -3, 28, -28, -22, 14, 46, -15, -40, -14, -71, -59, 10, 10, 21, 13, -3, -5, -10, -44, -3, -41, -19, -42, 28, 31, 18, -44, 31, -34, -15, -22, -53, 33, -74, -14, -74, 20, 23, -64, 27, -18, -63, -67, 28, -9, -71, 45, 2, 36, 7, -35, 18, -5, -64, -54, 52, 18, -73, -10, 16, -72, 46, -48, -7, 46, 42, -58, -72, 48, 43, 25, 56, -56, 10, -49, 3, 6, -59, -4, -12, -23, 38, -29, -18, -27, 10, -14, 36, 43, 11, -8, -47, -32, -79, -31, -44, -36, -14, -66, 14, -20, -69, -54, -7, -14, 15, 75, -50, 36, -29, -37, -66, -54, -72, 13, -25, -31, -35, 40, -29, -55, -68, 79, -28, -45, 6, 13, 9, 39, -30, -64, -74, -47, -68, -46, -32, -39, -65, -37, -23, -38, 30, -72, -21, 16, -52, 29, -73, -44, 45, 9, 50, 26, -32, -12, -13, -11, -31, -54, -22, -73, 27, -57, 6, -28, -1, -38, -31, 5, 3, 31, 25, 15, -44, 41, -71, 28, 28, -77, -58, -80, -46, -7, 3, 19, 48, -63, -27, -20, -32, -55, 42, 5, -32, -54, -46, 42, -33, 36, 27, -71, -50, 45, 39, -2, 2, -69, -72, -63, -19, -55, -28, 43, -28, -64, -28, -64, 24, 31, 1, -59, 48, 7, -69, -25, -67, -63, -27, -37, -16, -26, 28, 32, -45, 9, -41, -16, -75, 25, -77, 28, 24, -76, -31, -44, -1, -49, 25, 47, 28, -55, 39, 22, -24, -74, 41, 7, 18, -51, 40, -19, 20, -27, 18, -80, 43, 6, 39, 1, -47, 21, 5, -53, -44, 21, 45, -43, 3, 33, -62, -43, -38, -18, 26, 27, -52, -43, -70, 24, 47, -25, 37, 1, -47, -60, -76, -33, -17, -49, -61, 24, -30, 35, -34, -67, -29, 1, -48, 7, -51, 45, 36, -51, 18, 32, -57, -30, -20, 18, -55, 18, -7, -57, -45, -30, -7, 40, 37, -7, -34, 
  6, 28, 30, -85, -70, -44, 75, -17, -80, 15, -48, -59, -22, 57, -8, 30, -11, 64, 69, 29, -17, -94, 39, -116, 3, 29, 17, -86, -42, -26, -58, 39, 48, 72, -28, -71, 18, -66, -39, -27, -68, -88, 45, -41, 27, -27, 60, -15, 16, 90, 40, -40, -14, -56, 16, -91, -10, -22, 37, -14, -81, -40, -5, 26, 41, 87, 85, 81, 24, 85, -42, -77, -48, -15, 44, 48, -8, 84, 1, -49, 20, 67, 50, 8, -28, 8, 72, 68, -49, 16, 21, -39, -56, -87, 91, -25, -63, -37, 18, 16, 53, -34, 51, -59, -36, -1, -20, -32, -9, -63, 11, -30, -5, -44, -24, -76, 42, -10, 24, 34, 34, -18, -22, 7, -19, 7, 25, 46, 27, -80, -3, 42, 37, 59, 19, -2, 45, 58, 59, -55, 24, -24, -25, 9, -85, 42, 33, 65, -27, 57, -73, 57, 65, 41, -40, -6, 24, 11, -37, -16, 34, -92, 6, -7, 27, 11, -28, 2, 1, -45, -45, 17, 27, 13, -72, 27, 28, -52, -4, 15, 28, -74, -15, 30, -37, -56, 22, 28, -45, 34, 15, 4, 75, 44, 52, -35, 24, 27, -31, -25, -5, 9, 19, 81, 58, 13, 49, 52, 54, 16, 1, 59, 3, 23, -24, -9, 13, -54, -8, 37, 71, 14, -57, 66, 15, 61, 58, -17, 72, 29, -55, -50, 17, -1, -23, -32, 56, -74, 61, -33, -36, -40, -41, -48, 78, 22, 36, -71, -1, -34, 32, 22, -20, -30, 17, -39, 7, 22, 30, 55, 63, 25, -7, -38, 77, -76, -29, 63, -6, -36, -38, 14, 37, -53, -76, -22, 71, 18, 6, 35, -50, -31, -57, 23, 10, -68, 67, 110, -78, -17, -2, -66, -51, -30, 9, -32, -19, 31, -75, 5, 13, -41, 21, -27, -80, 2, 29, 22, 58, 18, -59, 46, -17, -30, -51, -32, 29, 16, -59, 52, -39, -24, -4, -39, -65, 44, 45, -26, 53, 42, -84, -3, -36, 60, 8, 29, -13, 78, -28, 46, 38, 45, 22, 34, 74, 69, -14, -40, -2, 4, -54, 30, 26, 77, -2, 21, -12, 64, 47, -68, -48, 29, -16, -12, 66, -18, -48, 37, 31, 65, -25, 39, 19, 41, 81, 7, 32, 23, 12, 45, 52, 9, -27, -4, 33, -4, 1, 43, -36, 56, 53, 34, -34, 61, -53, -42, 28, -6, -4, 46, 
  -77, 8, 7, -72, 34, -1, -71, -74, -8, -69, -8, -54, 19, 18, -15, -48, -60, -27, -74, -37, -9, -47, 10, 28, -45, -36, -75, -19, -71, 63, -35, 27, -48, 23, 20, 31, -9, 53, 41, -22, 57, -22, -23, -73, 32, 28, -72, -50, -10, -8, 17, -15, -21, -74, 5, -40, -56, -65, 13, -56, 42, -4, -66, -68, 6, -71, -77, -43, -3, -37, -31, -65, 42, 52, 21, 45, 39, -77, -61, -50, -76, -47, -10, 43, -10, -18, 3, 4, 32, -67, -36, 18, -48, -54, -55, 50, -11, -68, -66, 43, 39, 5, 31, 3, -52, -68, 47, -53, -48, 15, -29, -1, -35, 46, 62, -59, -53, -69, -3, 11, 11, 26, 7, 30, -8, 51, -37, -28, 44, -54, 26, 30, 37, 68, 24, -17, 22, -42, -74, 34, -37, 38, -69, -16, -44, -29, 8, -14, 49, -25, 0, -8, -75, -41, 18, 11, 3, -65, -74, -27, -48, -60, 32, -4, -18, -50, -58, 31, 40, -39, -17, 17, -54, -16, 48, -61, 33, -31, -64, 7, 7, 49, -47, -5, 46, -68, -70, -9, 45, -22, -58, -51, -42, -47, 4, 30, 15, -60, 29, -8, -48, -27, 2, -60, -1, 29, 2, -62, 26, -43, -39, -64, -19, 33, -14, -10, -38, -18, 14, -5, -53, 5, -51, 24, -80, 47, 24, -42, -16, 1, 31, -63, 22, 22, 33, 20, -40, -59, 56, -40, 19, -65, 7, 46, -54, 34, -49, 33, -63, 41, 7, -78, 26, -39, -73, -28, -71, 15, -63, -11, -46, 32, -23, -59, 22, 33, -16, 39, 49, -9, -31, -16, 11, 43, 38, -68, 45, -17, -17, -64, 27, -51, -53, -31, -44, 56, -55, -56, 26, -65, -10, 27, 26, 13, 16, 53, 1, 52, -50, 50, -53, -46, 12, -37, -27, -50, -63, -26, -76, -71, -63, -3, 48, 26, 44, 13, -67, 44, 28, 23, 26, -52, 6, 13, -2, -1, -18, -56, -26, -53, 27, 6, -6, 33, 41, 25, 31, -46, 6, -40, -78, -70, -69, -13, -20, 41, -4, 19, 2, 58, 40, -32, -49, 43, -63, -51, 17, 20, -32, -77, -70, -61, 27, -30, -77, -46, -63, 47, -13, -65, 36, -6, 32, -31, -27, -13, -29, 42, 0, -75, 28, 13, -61, -60, -75, -53, -72, -73, 25, -63, -64, -69, 2, -19, -76, 24, 39, -27, -59, 20, 
  -72, -1, -76, 11, -47, 25, 46, -21, 25, -55, 5, -60, 29, -15, -57, 25, 26, 5, -3, 35, 32, -61, 18, 29, 22, -38, -2, 23, 35, 16, 37, 28, 38, -42, -24, -78, -27, -25, -6, -64, 43, -13, -61, -22, 38, -36, -70, -25, -11, -47, 21, -32, 26, -23, -65, 42, 19, -9, -43, -79, 40, 8, -75, -39, 34, -3, 32, 30, 40, 58, -52, 48, -11, 24, 10, -6, 26, -29, -12, -64, -32, -32, -56, -21, 47, 4, -57, -47, -33, -5, -28, -48, 28, 53, -44, -32, 16, -30, -18, -78, 9, -18, -26, 48, -5, 44, -73, 30, -51, -31, -39, 41, -48, -10, -54, -59, -13, 20, -52, -33, -70, -3, -34, -44, -35, -12, -22, -63, -63, 5, -12, -7, 1, -24, -78, 22, -43, -77, -16, -2, 15, -33, -63, -70, -37, -46, 33, -46, -4, -26, 16, -72, -77, -45, 9, -74, -39, 61, 9, -78, 7, 49, -48, 38, -30, 16, 36, 44, -32, 17, 26, 27, -19, 47, -67, 36, -40, -59, 3, -46, 25, -77, 14, 30, 4, -48, 33, 15, -25, -54, -37, 42, 15, -75, 12, 18, -38, -76, -72, -22, -37, 8, -33, 20, 11, -40, 49, 28, 44, 7, 28, 43, -31, -59, -73, -72, -52, 47, -24, 4, -27, -16, -73, 54, 24, -9, -35, -2, -65, -75, -40, 31, 36, -8, 27, -74, -8, -25, 45, 36, 13, -49, -68, 30, -1, -35, -68, -44, -73, -5, -4, -73, -48, -60, -1, 42, -36, -8, -57, 42, 9, -68, -8, 43, -37, 17, -23, 6, 20, 49, 13, -61, -17, -40, -57, -41, 28, 0, 8, 52, 26, 32, -46, 34, -43, -19, 7, -32, -64, 5, -30, -69, 11, -46, 26, 2, -17, -78, -39, 65, -10, -44, -35, -45, -47, -22, -62, -37, 38, -25, 7, -37, -72, -2, -10, -2, -55, 48, -22, 29, 14, 33, -11, -28, -45, -61, 21, 69, -28, 44, -20, 62, 12, -48, -44, -47, -73, -26, 40, 46, -43, 39, -40, -66, 2, 56, -78, 35, -28, 49, 0, 19, 0, -23, 25, -23, -71, -78, -32, 14, -17, -78, 0, 30, -1, -36, -26, 13, -5, -20, 7, 29, 10, 71, -31, -72, 7, 15, -61, -66, 10, -38, 5, 28, 22, -25, 55, -54, 7, -39, -45, -22, 33, 25, 34, -51, 44, 39, 56, 19, 
  -12, -30, 19, 38, -50, -25, 41, 25, -8, -72, 9, -70, 46, 4, -39, -9, 19, 58, 64, -1, 18, 0, -36, -36, -42, -50, 37, -3, 31, -41, -29, -8, 35, -56, -71, 23, 17, 50, -47, -18, -25, 14, 8, 33, 46, 62, 41, -19, -16, 30, 23, 28, -61, 13, -33, -62, -26, 16, 58, 15, 40, -20, -2, 44, 9, 1, -8, 44, -49, 17, -37, -3, -39, -53, -33, -42, 42, -18, 47, 46, 33, -78, -35, 79, 6, -20, 45, -6, -29, 11, 55, 57, -14, -24, 41, -42, -56, 30, -44, -17, -54, -59, -22, 43, -1, -52, -41, -43, -49, 2, -27, 7, -7, 12, 8, 40, 47, -65, 36, 11, -58, 20, 11, -49, 34, -14, 42, 55, -4, 27, -3, -61, -34, -44, 46, 20, 46, -44, 10, -5, 49, -14, 55, 37, -48, -52, -16, 27, 61, 26, -75, -35, -60, -59, -12, -8, -73, -49, 3, -32, 4, 59, -61, 34, 0, 29, -45, 60, -25, -70, -59, 1, -74, 52, -3, -13, -5, -54, 64, 3, -37, 18, -48, -60, 20, 28, 7, -60, -39, 71, 22, -31, -55, -68, -20, -36, -51, -52, -52, -7, 38, -60, 65, -35, -65, 13, -33, -49, -46, 35, -66, -66, -11, -44, -43, -32, -42, -41, 38, -23, -26, 43, 15, -34, -45, -7, -34, -41, 3, -49, -7, -20, 1, 15, -20, -43, -60, 29, 53, 52, -59, -59, 15, -64, -48, -58, -64, -6, 27, 34, 52, -61, -37, 37, -66, 3, -74, -74, 56, -28, -7, 1, -34, -16, 13, -23, 35, 60, -37, -20, -37, -79, -22, 6, 62, 2, -72, 26, -24, -24, 43, 39, 39, -18, 43, 62, -1, -46, -20, 12, -33, -5, 14, -71, 33, 23, 21, -44, -54, -18, -53, 49, -24, 7, -32, 14, -66, 12, 17, 29, 10, 9, 8, 39, -1, -16, -63, 36, 6, -52, 6, -27, 34, -39, -25, 21, -36, -66, 40, -12, 15, -33, 14, 58, -58, -9, 7, 23, 6, 5, 35, 44, -30, -42, -64, 39, 45, 48, 22, -30, -39, -50, -24, 35, -24, 32, 56, -15, 14, -23, 18, -29, -66, 51, -7, -17, -27, 29, -8, -75, 44, -40, 52, -49, 33, 16, 30, 35, -65, -50, -30, 47, -42, -30, -37, 34, -21, -7, 69, -10, -1, -19, 3, -27, 54, -41, -43, -40, 31, -12, 
  -18, 11, 41, 47, 38, 22, -32, 37, -46, -10, 42, 32, 39, -29, 23, 0, -11, 3, -16, 40, 36, 39, 21, 9, -36, 39, -2, -51, -12, 15, 33, 14, 45, -81, -44, -16, -17, 46, 26, 38, -12, -59, -35, 23, -28, -4, -74, 4, 39, -37, 11, 13, 43, 31, -5, 26, -8, -5, 5, -54, 49, -69, 27, -42, -27, 3, -11, -53, -75, 31, 28, -39, 39, 13, -57, -3, -7, -79, 40, -44, -49, 5, -53, -65, -79, -72, -72, 34, 28, -68, 35, -10, 4, 15, -50, 8, 26, -40, -26, -57, -29, 5, -56, 25, -29, -65, 30, -57, -8, 36, -65, -60, 43, -12, 2, 1, -46, 32, -69, -46, -26, -64, -73, -64, -62, 48, 19, -38, -54, 16, -71, -67, -10, -13, 21, -55, -43, 45, -2, -63, -13, -31, 5, -56, -38, -44, -25, 21, -41, 21, -36, -41, -74, 6, -34, -13, -64, -15, -19, -68, 27, -12, -35, 19, 13, -45, -14, 1, -6, 7, -9, 15, 48, 40, 31, 56, -47, 2, 31, -17, -10, -25, -45, -15, 22, 26, -57, -77, -61, -18, 27, 45, -38, -49, -67, 3, -38, -4, -52, -65, 23, -24, -4, -43, -20, 63, -45, 0, -49, -39, 41, -61, 17, -79, 15, -41, 42, 22, -60, 39, -13, 4, 22, -12, -40, 18, -15, -62, -69, -42, 36, 35, 37, 15, 1, -53, -43, -39, -70, -42, 34, 30, -50, -17, -4, -74, -57, -58, 37, 17, -37, 30, 0, 13, -63, -42, 32, 14, 11, 47, -64, -14, -38, -65, 14, 37, 19, -75, 43, -41, 14, -53, -70, -55, 23, -80, -3, -30, 20, -64, 32, -72, 14, -28, -6, -78, -23, 1, -3, -55, -30, 41, 12, 13, -54, -55, -13, -15, 35, -49, 18, -48, 18, 22, 38, -53, 17, 47, -14, -65, -22, -52, -1, 39, -42, 41, -1, -63, 35, 30, 17, -74, 18, -33, -68, -48, 25, 45, 17, -20, -37, 22, -21, 5, -12, -68, -67, 30, 10, 26, -45, -79, 27, -37, -47, 45, -70, 23, 47, 21, -80, -22, -59, 48, 45, -53, -39, 19, -74, 30, -38, -73, -68, -37, 38, -24, 27, -59, -2, -3, -42, -29, -66, 45, -53, 52, -77, -29, 28, 0, -62, -62, -4, -35, -7, 72, 29, 9, -15, -68, -49, -29, 35, -6, 8, 40, -29, -47, -71, 23, 
  -86, 39, -57, -12, -45, 76, 28, 103, -21, 86, -26, -8, 89, 28, 38, 70, -4, -1, 55, 75, -14, 15, 4, 21, -49, 30, 31, -70, 17, -56, 18, -34, 17, 4, 49, -5, -6, 54, -38, 47, -25, 6, 50, 69, -11, 66, 54, 2, -6, 56, 100, -11, -96, 67, -18, 16, 9, 29, 86, -30, -6, -85, -35, 3, 53, 36, 55, -12, -36, 30, -84, 82, 59, -6, 29, 76, 87, 49, -51, -45, 36, 7, -41, 4, 3, 40, 9, -6, -10, 32, 11, 42, 59, -90, -77, -40, 4, 11, -16, 27, 102, 42, 53, -63, -37, -20, -54, -17, -47, -65, -33, -44, -43, 39, 21, 56, -11, -2, -12, -21, 40, -22, 51, 39, -47, 33, 20, -36, 42, -24, 26, -20, 74, 23, -24, 10, 31, -58, 42, -22, -13, -13, -43, -14, -57, 80, -55, -49, -24, -27, -42, -16, 44, -3, 8, 47, 58, 12, -30, 81, -80, -34, 20, 28, 82, 28, 93, -94, -11, -52, 32, 88, 24, -69, 72, 54, 23, -26, 78, 63, -5, -37, -58, 48, 6, 12, -15, 60, -19, -13, -20, -29, 62, 44, -22, 20, 72, 11, -54, 40, 2, -70, -3, 49, -32, 0, -77, -64, 46, 18, 20, -39, -35, 72, 15, -9, -4, -74, 4, 75, -46, 4, -23, -29, 97, 34, -63, 0, 101, -21, 12, -70, -42, 3, -18, -43, 39, -72, 32, 15, 80, -53, -38, 25, -15, -121, 127, -43, -104, -6, 37, 56, -50, 9, 40, 54, 34, 25, 44, 28, 27, -97, -46, 1, 48, 2, 23, 55, 53, 14, 51, 13, 112, -59, -7, -71, -65, -15, 44, -110, -55, 42, 19, -11, 106, 4, 29, 78, 18, 30, -10, -15, -93, -45, 32, 42, -94, 29, 55, -4, 34, 40, 13, 30, 4, -76, 21, 70, -24, -1, -11, 13, 72, -88, 49, 38, 37, 82, -32, -90, 82, -61, -32, -17, -57, -50, -17, 75, -85, 15, -84, 81, 95, 26, -26, 84, 5, -65, 12, 26, 11, -39, 19, 64, 59, -30, -1, -14, 30, -72, -59, -48, 9, 24, 83, -22, -51, 104, -48, 102, 22, 2, -21, -3, 26, 12, 21, -32, -7, -26, 46, 12, -19, 84, 45, 73, 39, 101, 11, -46, 25, -82, 57, 59, -45, 21, 107, -10, -40, 65, -35, 109, 77, 24, 28, -31, 66, -18, 60, 41, 
  61, -30, 50, -16, -19, 42, 30, -51, -71, -27, -14, -77, -15, -29, -58, -9, 22, 9, 37, -50, 12, -48, 32, 42, -24, 9, -59, -5, 40, -32, 37, -52, -13, -2, -44, -46, -34, -19, -54, -47, -25, -71, 2, 61, -33, -11, -64, 7, -12, 35, 17, -79, -26, -70, 31, -58, -62, -75, -36, 20, -78, -5, -58, 13, 9, -67, -50, -64, 25, -34, -30, 41, 34, -61, 4, 39, -49, -17, 36, -41, 27, 14, -28, 23, -28, 42, -20, 43, 27, -24, 54, 0, -75, 26, -6, 12, -25, -43, -28, -36, -1, -17, 0, -72, -12, 4, -71, 30, 7, -34, -19, 32, -18, -5, -55, -67, -42, -15, 14, -15, -6, 43, 10, -31, 17, 34, -1, -80, 7, 64, 5, -41, -65, -67, -4, -54, -39, 38, -5, -30, 32, -6, -57, -52, -36, 16, -14, -79, -77, 9, -30, 10, 40, 12, -63, -62, 4, 46, -15, -64, 0, -38, -10, -27, -15, -1, -20, 4, -32, 32, -49, -7, -24, -43, -55, -20, 20, -34, 5, -29, -73, -8, -43, -4, -4, -48, 35, 18, -57, 42, -57, -42, -69, -4, 4, 10, 18, 53, -79, -45, -24, 36, -27, 9, -20, -32, 44, 36, -77, -46, 25, 36, -47, -86, -67, 28, -45, 2, 9, -32, -22, 25, -49, -5, -42, 15, 49, -16, 24, -71, -61, 0, 17, 14, -28, -62, -13, -20, -4, -70, 2, -40, -34, -34, 11, 14, 28, -75, -4, -7, -54, 35, 44, -35, -14, 24, -34, 15, -25, 33, -50, 29, -50, -26, 33, -53, -47, -72, -38, -40, -35, -45, 18, -41, -39, 28, 19, -61, 14, -78, -60, 59, 2, -33, -11, -40, 8, 15, -39, -81, 9, -70, -32, -47, -18, 6, 46, 6, 56, -53, 15, 11, -60, 35, 27, 4, -12, 19, 0, 33, 8, -28, -74, -31, 27, -56, 30, 18, -23, -28, 38, -22, -35, -55, 62, 42, -2, 11, 16, 36, -51, 8, 0, 43, -27, 8, 43, 14, -71, -71, -24, -62, -81, 28, -20, -32, -80, 10, -66, -67, 16, 13, 6, -4, -61, 15, -41, -56, -74, 33, -77, 38, -41, 10, -25, 6, -76, -1, 34, -17, 25, -1, -76, 17, 42, 60, 6, 35, 29, -37, -21, 63, -48, 6, -60, 30, 0, 30, -50, -4, -1, 19, 33, -28, -25, 26, -58, -7, -50, -26, 
  -12, -62, 6, 42, -4, -61, 54, -1, 30, -31, -65, -71, -19, -33, -46, -13, 23, 18, -2, -22, -40, -65, -56, -52, 23, -28, -52, -42, 57, -6, -8, -32, -73, -24, -68, -46, -77, -3, -54, 29, 1, -46, -64, -24, -38, -65, -2, 39, 45, 35, 16, 48, -23, 36, 8, -34, -45, 40, -72, -66, -26, 28, 7, 16, -63, -38, 15, 42, -63, 30, -21, 48, 22, 37, -47, 34, -3, -3, -4, 31, 15, 2, 16, -8, -52, 34, -14, 11, -32, 19, -73, -79, -63, 23, -19, -75, 46, 44, -10, -51, -63, -31, 26, 4, 23, -76, -35, -29, -8, -24, -35, -31, -29, -65, 20, -54, -54, 41, 36, -60, 24, -51, -38, -30, -68, -64, -72, -61, -60, -68, -32, -49, 40, 31, -41, -30, 47, -8, -63, -53, -42, -14, 19, 39, -73, -54, 31, -51, -65, -49, -45, -59, 2, 38, -50, 17, -72, -13, 15, 36, 12, -13, 36, -44, -31, 29, -45, 26, -41, -34, 1, 15, -29, -11, 22, -51, -9, 41, -44, -36, 42, -59, 17, 54, -20, -74, -24, 43, -40, -55, 14, -40, 51, 22, 43, 31, -50, -63, -30, -27, 19, -37, -50, -31, -52, -62, -2, 39, -43, 19, 39, -29, 23, 27, -59, -22, 56, -64, -61, -23, -17, -23, 25, -52, -19, 25, 5, 37, -59, -29, -56, -1, 28, -29, 24, 8, 47, -43, -75, 43, 18, -22, 20, 36, -3, -19, -56, -25, -34, -40, -23, -44, -4, 18, 36, -4, 19, -7, 25, -71, 33, -78, -40, -57, 8, -2, -42, -12, 11, -46, -31, -70, -79, 28, 48, -38, 40, -8, 18, -1, 10, -13, -49, 26, -40, 33, -34, 48, -36, 8, 56, -66, 3, -72, 38, 30, 45, 20, 28, 34, 5, -46, 17, -10, -73, -79, 9, 28, 26, 5, -70, -23, -27, 2, 18, -75, 2, -58, -7, 28, 3, -29, 3, 40, 11, -21, -29, -63, -34, -22, -38, 8, -30, -42, -28, 30, -69, -48, 7, -8, -29, -49, -1, -21, -56, -58, -1, 12, -54, 21, 10, -23, -77, -15, -15, -77, -17, -64, 5, -34, 39, -74, 6, -72, -9, -9, -53, -72, -67, -30, 23, 45, -36, -61, -42, -54, -70, -29, 22, 5, 6, -25, 27, -13, -15, -34, -73, -3, -64, 19, -67, 45, 25, 29, -7, -54, -55, -54, -1, 17, 
  36, 27, -69, -61, -23, -9, -49, -28, -72, -34, 9, 14, -19, -62, -14, -27, -19, -53, 43, 29, 42, -66, -73, 22, 34, 43, 9, 44, 35, 7, -63, 8, 12, 24, -48, -8, -40, 2, -13, 45, 4, 11, -11, -8, -28, -18, -41, -63, -48, 35, -64, -72, 33, -1, -38, -51, 9, 25, 19, -38, -50, 28, -20, 27, -29, -64, 19, -7, -77, 0, -33, -59, 23, 40, 30, -9, 33, 34, -32, -44, 24, -56, 16, -61, -67, 9, -3, -3, -1, 31, -7, -13, 11, -4, -47, 10, 21, -63, 19, -47, 44, 34, 25, -78, -52, 30, 40, -57, -28, -67, -37, -76, -32, -77, -32, -45, -64, 1, -35, 19, -2, 25, -56, -19, 9, 41, -3, -27, 13, -20, -33, -74, -47, 26, 0, 11, -31, -31, 31, -19, -52, 35, 3, 4, 9, -36, 4, -23, -62, -72, 14, -54, -27, -74, 1, -55, 15, -77, 11, 30, 20, 10, 25, 34, -43, 29, -59, -73, -29, -48, 16, -78, 24, -49, -18, -31, -39, -11, 41, -53, -27, 29, 3, -70, 6, -30, 34, 7, -50, 56, -44, -45, -7, 15, -37, 33, -69, -25, -52, 29, 28, -68, -2, -59, -8, 5, -34, -5, 0, -12, 28, 29, 39, 35, -56, -40, 1, -21, 40, -28, 2, 12, -32, -24, -17, -73, -64, -10, -28, 15, -37, 37, -24, 25, 15, 31, -66, -60, -63, -54, -68, -33, -14, -74, -10, 41, 31, -22, -33, -3, 11, 29, -37, -27, -23, -25, -23, -71, -59, -22, -19, 20, 15, 2, -75, -28, -20, -7, -6, -44, -72, 16, 37, -46, -32, -60, 41, -65, 46, 41, -55, -8, -45, -60, -70, 48, 43, -61, -48, -11, -2, -37, 20, -16, -44, 43, 9, -60, 44, -14, -41, -33, 26, -6, -56, -27, -41, -25, 5, -79, -17, -59, -29, -61, 24, 14, 6, -55, -68, -62, -4, -2, 15, -5, 17, -76, 34, -36, 14, -52, 33, -80, -38, -55, -63, -14, -29, -4, 32, -22, -52, -50, -79, -34, -53, 4, -47, -27, -39, 11, -3, -61, -27, -57, 22, -73, -29, -38, -14, 16, -20, -51, -79, -51, 15, -36, -9, 17, -5, 25, -44, -51, 0, -27, 35, -40, -27, 5, -54, -1, 22, 58, 46, 3, -39, 28, 47, 0, -24, -27, -19, -35, 2, 23, -75, -47, 19, -41, -53, -8, 
  -12, 62, 93, 63, -62, -27, 40, -36, -65, 36, -4, 27, -70, -8, -29, 39, 32, 45, 15, 19, -15, 30, 2, -15, -3, -11, -21, 37, 6, -3, 22, -8, 109, -25, 74, 27, -10, -51, -49, 93, -50, 50, 49, -33, -42, 28, 24, 24, 42, 67, 64, 26, -59, 74, 27, -16, 93, 27, 32, 2, 95, 33, 26, 48, -1, 18, -36, -44, -36, -31, -4, 14, 33, -34, 1, 18, -24, 71, -7, 46, -82, 41, -58, 10, -4, 0, -27, -68, 24, -45, -59, -34, 36, 71, 2, -24, -66, 17, 36, -45, -33, -21, -18, 6, -24, -48, -58, -65, 32, 17, 41, 75, -25, 22, 20, -51, 56, 40, 8, 27, -26, 3, -26, 44, 45, -66, -41, -65, -24, -9, 14, 36, 37, 45, 66, -67, -66, 96, -67, -59, -37, -2, 13, 59, -76, -46, -44, -54, -33, -34, 52, 33, -31, -8, -100, 31, -52, 0, 33, -40, -23, 17, -16, -83, 26, -33, 34, 15, -40, -20, -56, -5, 3, 0, 39, -41, 53, -16, 31, 30, -38, 4, 34, -12, -64, -13, 20, -57, -44, 4, -12, -19, -45, -36, -23, 10, -14, -34, -40, 81, -50, -11, 27, -19, -8, -69, -12, -8, -62, -15, 94, -59, -48, 2, -50, -36, 0, 28, -17, -47, 15, -45, -23, 45, -28, 24, -5, -4, 51, -52, -69, -50, 31, -44, 6, -17, 37, -15, -90, -5, 41, 42, -36, -6, -17, -16, -24, 50, -1, -70, -18, -22, -4, -70, -6, -50, 10, 12, 30, -10, 38, -22, 32, 12, -18, 0, -72, 56, 53, -31, -60, -12, 50, 6, 52, 43, 13, -15, -47, -45, -63, -19, -74, -18, -6, -43, 23, 45, -17, -83, -2, 41, 80, -10, 20, -65, -36, -18, 75, 23, -3, -1, 8, -8, -37, 10, -46, 11, 20, 29, -10, -29, -25, -19, -51, 57, 5, 45, 51, -37, 35, 83, 87, 56, 20, -2, -32, 47, 89, -12, 45, -32, -18, 26, -12, 10, 31, -12, -10, 84, -20, 13, -43, -61, -41, 18, 43, 76, 6, 87, -69, 25, 96, 58, 14, -12, -56, -9, 59, 57, -20, -6, 66, -3, -56, 67, 79, 30, 68, 76, 16, -9, 0, -35, 24, 25, -33, -31, -30, -78, -52, 43, -63, 30, 102, 76, -16, 46, 53, 6, 20, -17, 32, 39, -31, -20, 28, 78, 62, -13, 
  18, -24, -55, -28, -23, -33, -59, -76, -18, -27, -41, 1, 39, -42, -56, -75, -46, 22, -49, -53, 3, -11, -29, 11, -79, -10, -67, -76, 24, -55, -42, -32, 48, -4, -64, -79, -61, -39, -22, -70, 42, 15, -17, -57, 22, 20, -16, -70, 48, -35, -78, 39, -33, -6, -49, -31, 11, 44, -12, 19, -71, -30, 1, -66, 1, -39, 64, 0, 12, -37, -56, 4, 38, 14, 42, 33, 43, 16, -45, -64, -19, 44, -3, -4, -43, 30, -52, -51, -11, 18, -68, 18, 1, 19, 41, -41, 36, 43, 4, -70, 36, 31, -42, 4, 26, 31, -59, -31, 41, -9, 3, -20, -21, -44, 25, 32, 6, 10, -66, -25, -61, -48, 13, -45, 24, 37, -58, -35, 13, -80, -62, -33, -23, -6, -8, -67, 26, 18, 40, -15, -75, 24, -47, 19, 5, 43, 33, -69, 17, -13, -72, -64, -40, -33, 12, 33, -35, -4, -52, 23, -11, -75, -75, -24, 7, -3, -44, -2, 6, 43, -20, -15, -1, 17, -64, 19, -20, -58, -22, -19, -29, 32, 19, -74, -71, -63, 34, -22, -63, -45, -39, 4, 11, 43, -3, 13, 35, -75, -11, -32, 37, 17, 16, 21, -22, -33, 43, 40, 22, 2, -3, -11, 19, -72, 36, -50, 32, 29, -38, -14, 16, -26, -76, -3, -46, 43, 14, 33, -56, -56, -79, 0, -48, -16, -74, -13, 2, -62, -16, -13, 0, -40, 19, -50, -18, 21, 21, 44, -23, -71, 8, -26, 8, 24, 4, -12, -35, 5, -68, -34, -49, -19, 41, 40, -60, -7, -27, -71, -40, 4, -10, -64, 42, -15, 2, 10, -5, 37, -33, -74, -38, -5, -33, -57, -48, -60, -43, -37, -37, 44, -14, 34, -21, -67, -4, -31, 11, 28, 0, -32, -43, 63, -45, 4, -43, -45, -59, -5, -26, -35, -61, -60, 31, -28, -74, -71, 35, 13, -57, -51, -54, -22, 3, -80, -68, -64, 3, -19, 3, -10, -53, -11, -50, -56, -43, -68, -62, -37, 3, 20, -20, -61, -23, -22, 26, -67, 7, 20, -31, -63, -14, -41, 18, 39, -3, -75, -44, 36, -65, 27, -30, -28, -69, -75, -5, 23, -34, -78, -64, -2, -23, -76, -48, -13, 45, -26, -26, -17, -72, -70, -53, -32, 11, -68, 25, -8, -50, -75, -5, -66, 44, -42, -35, -9, -56, 12, 45, -11, -23, -24, 
  19, -33, -27, -33, 47, 49, -5, -37, -28, -15, 43, -40, 13, -51, 14, 73, 18, 1, -69, 42, -39, 24, 73, -22, 8, -38, -1, -9, -27, 37, -7, 36, 98, 53, 49, -31, -31, -85, 19, -56, -45, -90, 10, 1, -90, 6, 15, 67, 53, -28, -9, -1, -24, -49, -2, -125, -73, -26, 27, -32, -114, -53, -57, -37, 18, 41, -78, -74, -29, -99, -7, -25, -99, -42, 27, -32, -65, -52, -26, 102, 42, -44, -18, -20, 30, 30, -57, -57, -41, -101, -16, 52, -33, -6, -38, 46, 53, -50, -26, 12, -76, -34, -54, 28, -17, -28, 71, -3, 36, -98, -8, 110, 67, -54, 86, 33, -34, 42, -73, 11, -43, -37, 44, -5, 63, -64, -9, -56, 80, -85, -60, 76, -12, 36, 14, 7, 20, 70, 70, 13, -21, 54, -13, 0, -43, -25, 55, -4, 9, 87, -76, 48, -25, 31, 67, -23, 27, -83, -72, 10, -79, -64, -117, 52, -64, 42, 0, 58, -9, 46, 48, -23, -8, -15, -26, -18, 29, 36, -48, 53, -83, 45, 0, -25, -56, 87, 78, -13, -2, 89, -10, -45, 22, -10, -32, -12, -20, 12, -60, -68, 43, 66, 75, 53, -5, -40, 91, -4, 45, 26, -56, 27, -7, -41, -15, -20, 15, 79, 49, 32, 58, 20, 73, -50, -64, 43, -4, 88, -21, 13, 24, 37, -34, 63, 25, -7, -46, 82, 63, -15, -35, -37, 16, 13, 16, 6, -10, 50, 32, 66, -46, 13, 81, -59, -8, -89, -99, -8, -27, 54, 31, 0, 39, 44, 65, 45, 27, 54, 46, 2, 31, -2, -27, -6, 83, 4, 95, 21, -47, 5, 60, -17, -71, -36, 75, -28, 37, 61, -83, -41, -90, -3, 13, 62, 112, 38, 2, 15, -9, -62, -87, -16, 60, -23, 4, 73, 16, 28, 74, 6, 49, -5, 7, 70, -25, -17, -13, -37, 49, 17, -12, -45, 22, -46, -44, 2, 82, -8, 17, -29, -49, 23, 28, -9, -7, -35, 0, -20, 17, -79, 52, -108, -39, -58, -27, -101, 4, -47, 27, -59, 9, 24, 79, -32, -25, -75, 36, -9, -11, -35, 39, -52, -26, 27, -88, 26, 32, -6, -3, 34, 7, -89, -20, -82, 34, -73, -37, -48, 59, 53, -80, 93, -13, -24, -43, 17, -74, -20, 0, -12, -35, -9, -87, -81, -68, -55, 7, -61, -63, -14, 
  35, -31, -18, 20, -17, -22, 10, 7, 41, -41, 50, 10, 16, 37, 21, -28, -55, -41, 10, -21, 45, 41, 1, -51, -36, 45, 9, -72, -3, 31, -68, -5, 31, 15, 24, 11, -13, 41, 30, -56, -60, -40, -49, -51, 19, 2, -17, 19, -37, 24, 14, 46, -15, -8, 25, -25, -37, 18, 36, -33, -40, 4, -39, 61, 71, 18, 24, -50, 36, 18, -10, 90, -40, -2, -19, 42, -48, 20, -32, -79, 19, 59, -59, 28, 5, -69, -64, 63, 32, 11, 56, -50, -9, -7, 47, -51, 62, 56, 14, -40, -57, -65, -34, 40, 32, -67, 50, -22, 21, -27, -8, 21, -25, 7, 63, -66, -63, -35, 52, 11, -7, -72, -62, 33, -30, -15, 4, 40, 52, 5, -61, -7, 18, 53, -48, -27, 36, 1, 55, 16, -37, -32, -35, 40, -28, -27, 0, -53, 27, 48, 35, 19, -58, 21, 17, -9, 29, 43, 2, -19, -68, -53, 41, -57, -25, -17, 46, -56, -5, -30, -56, 36, 17, 17, 15, 36, -14, -71, 48, 30, 29, -66, -64, -10, -46, -13, -65, -55, -63, -43, 10, 14, 3, -14, -71, -7, 22, 31, 2, 29, -6, 38, -40, -56, -34, -34, 48, 27, -63, -43, -56, -74, -47, 38, 27, 17, 49, 26, -5, -12, -30, 42, -70, -55, -31, 41, -73, 8, 15, -53, -72, 32, 13, 3, 24, -65, -41, -39, -6, -10, -48, -8, -42, -69, -62, 20, -61, -10, -49, -89, -56, -68, 29, -49, -28, -77, 36, 37, -63, 6, 8, 0, -76, -54, 12, -51, -64, 9, 50, 35, -55, -38, -15, -52, -34, 35, -37, 40, 42, 20, -76, 20, 10, 40, 55, 36, -20, 46, 20, -23, 75, -34, 26, -31, -69, -39, -36, -22, -29, -7, -70, 15, 13, -59, -14, -8, 40, -53, -5, -29, 14, -29, -71, -10, -3, 41, 49, 1, 20, 44, -48, -31, 32, -43, -30, -64, 17, 83, 13, 32, 20, 77, 8, 18, -5, -64, -4, -58, -11, -23, 26, -74, 36, 10, 81, -25, 51, -32, 18, 47, -80, -35, -4, 46, -23, 1, -19, -20, 31, -5, 68, -63, 48, 7, -8, 45, -14, 21, 42, -6, 13, 41, 47, -62, -65, -33, 5, -43, 31, 61, -43, 52, -44, 17, -9, 19, -10, 38, -27, -28, -41, 68, -53, -32, 12, 38, 2, 46, -52, 2, 
  57, -45, 6, 59, 31, 19, -9, 64, 75, -68, -44, 48, -10, -13, -27, 70, 36, 17, -13, -44, 48, -24, -23, 22, 11, 27, 4, 63, -9, 12, -23, -4, -52, -44, 85, 60, -39, 33, -18, 24, 32, -43, 21, 10, -11, 1, -106, -3, -49, -29, 4, 9, 61, -8, 17, 16, 38, 30, -23, 28, 29, -40, -64, -26, 35, 34, -4, 58, -7, 45, -6, 72, 19, -23, -50, -26, 31, 15, -76, -10, -18, -51, -49, 10, -53, 34, -31, 11, -37, 53, -41, 18, -2, 17, 29, -14, 54, 15, 3, 15, -65, 106, 20, 34, -16, 4, -24, 25, -50, 101, 24, 36, 93, 108, 3, 75, 17, 80, 82, 15, 26, 27, 21, 6, 45, -19, 2, -13, 60, 1, 80, -7, -33, 0, -17, 54, -20, 19, -62, -54, -20, 69, 70, 80, 6, -8, 14, -17, -15, 40, 30, 58, 62, 69, 55, 34, 46, 66, 110, -22, -75, 6, -43, 56, -36, -49, 23, -52, 93, 54, 62, 57, 19, -1, 40, -80, 2, 7, -68, 56, 51, -3, 41, 38, 16, 34, -40, 21, -2, -72, -26, -35, -52, 29, 12, 22, 62, -34, 76, -40, -34, -13, 27, 55, -43, 6, 39, 3, 71, 56, -12, 72, -15, -56, 35, 4, -9, 9, -56, -41, -59, 36, 90, -21, 13, -67, 37, -13, 8, -36, 93, -54, 8, -25, 64, 28, -26, 95, 17, -33, 1, 94, -102, 10, 47, 12, -67, -58, 39, -36, -99, 3, -1, 57, 16, 69, -32, -51, -15, -53, -26, -8, -44, -98, -1, 15, 57, -20, -31, -29, -52, -62, 25, -55, -65, -72, 66, -9, 22, -78, 16, -53, -15, 30, -74, 10, -81, -91, 44, 11, -42, 23, -11, 13, -56, -56, 42, -67, -17, -27, 11, 53, -88, 29, 115, -76, -35, -29, -5, -70, -22, 61, 1, -63, 68, 54, 74, 82, 1, -33, 52, -66, -30, 16, -12, -10, -26, -91, 45, -75, 93, 32, 52, -9, -61, -71, 55, 16, 4, -18, 2, -39, -39, -50, -43, -69, -26, 8, -73, -27, -8, 20, -36, -99, -116, -15, 3, -48, 27, -78, 14, 30, 54, -30, -21, -91, -91, 17, 55, -12, 39, -57, 38, -24, -3, -53, -42, -37, 80, 50, 52, 33, 3, -33, 44, -7, -52, -29, 23, -39, 15, -8, -37, 23, -37, -12, 38, -1, 0, 46, 
  -21, -73, -28, -4, -61, -2, 31, -31, -25, 2, -4, -67, 2, 2, 36, -57, -27, -45, -85, -75, 11, -48, 4, -45, -47, 22, -42, -76, -56, 0, 19, -34, 10, 2, -25, -81, 53, 27, -47, -3, 11, 14, 4, -50, -1, -57, 49, 16, 24, 29, 6, -56, 26, -46, 37, -6, 36, 3, -15, 18, 24, 23, -23, -51, 42, -6, -51, 29, -49, -26, 25, -59, -34, 43, 30, -1, -62, -74, -9, -3, -14, 27, -48, 10, -14, -62, 35, 14, 22, 4, 43, -77, -37, 22, -7, 23, -26, 28, 19, -31, -71, 24, -66, -56, -12, -77, 49, 46, 50, -33, -1, 25, -57, 26, -75, -3, -67, -55, -19, -42, -56, -65, -13, 9, 51, -40, -79, -10, 34, -46, 48, 21, -57, 44, -73, -5, -68, 37, -46, -31, -78, 76, -62, 20, 4, -11, -70, 20, 38, -64, 15, -8, 37, 32, -6, -33, 22, 12, 26, 5, 55, -31, -43, -3, -48, 9, 35, 54, -32, 11, -43, 14, 21, 58, -24, 37, 43, 12, 53, -73, -58, 51, -22, 16, 20, 43, 23, -51, 25, 11, -72, -79, 27, 40, -76, 0, -5, 24, 35, -64, 5, -67, -66, -44, -1, -30, -73, -46, -47, -35, -31, -43, -14, -37, 12, 8, 6, -33, 23, 29, -42, -58, 40, 7, -47, -84, 32, -17, 38, -36, 60, 33, -32, 9, -16, -6, 46, 17, 45, 6, -65, -1, 26, -40, 8, -42, -54, 46, 13, -32, -84, 42, -27, -84, 31, 11, -21, -54, -51, -48, -70, -61, -46, -11, 26, 26, 2, -76, -58, 18, -29, 3, 24, -17, -26, -18, -65, -44, 29, 35, 40, -28, -72, -41, -26, 23, -55, -10, 2, -20, 0, -51, 2, -68, -14, -66, 41, 16, -81, 29, -43, -40, -68, -25, -48, 45, -41, -15, 6, -28, 0, 31, 3, -29, 40, 18, 10, -42, 40, -80, 27, -46, 29, -75, 21, 14, 50, -24, -20, -29, 12, 23, -44, -39, 38, 18, 1, 13, -47, 31, -78, -55, -13, -30, 2, 33, -26, -13, 20, 24, -59, -31, -26, 18, -76, -48, 11, -2, -75, 6, -57, -31, -37, 30, -1, 20, -19, -39, 12, -56, 3, 18, 17, 21, 12, -3, -69, -19, -51, 33, 3, 32, 45, 10, -44, -62, -15, -37, 21, -36, -22, -2, -67, 21, -79, -20, 13, -66, 16, 11, 
};
const TfArray<2, int> tensor_dimension10 = { 2, { 16,400 } };
const TfArray<1, float> quant10_scale = { 1, { 0.0018707811832427979, } };
const TfArray<1, int> quant10_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int32_t tensor_data11[16] = { -529, -67, -455, -489, -322, -520, 181, -657, -529, -529, -253, -529, 177, -297, 267, -555, };
const TfArray<1, int> tensor_dimension11 = { 1, { 16 } };
const TfArray<1, float> quant11_scale = { 1, { 5.6408058298984542e-05, } };
const TfArray<1, int> quant11_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int8_t tensor_data12[6*16] = { 
  21, -32, -38, 4, 60, -6, -36, 46, -11, 25, -67, -32, -12, 12, 18, -6, 
  -37, 70, -79, 45, 35, -30, 6, -71, -71, -82, 33, 25, -88, -7, -127, -59, 
  -44, -92, -84, -96, -79, 78, -31, 40, -23, 86, 107, 3, -73, 75, 6, -86, 
  30, -11, -83, -87, -36, 7, -98, 13, -78, -90, -71, 82, 88, -52, -10, 8, 
  56, -87, -28, -95, 70, 17, -75, -8, 85, -39, -12, 20, 38, -70, -53, 47, 
  -72, 60, -83, 20, 43, -40, -91, 42, -62, -77, 70, 1, 36, 56, -43, -1, 
};
const TfArray<2, int> tensor_dimension12 = { 2, { 6,16 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0055909520015120506, } };
const TfArray<1, int> quant12_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int32_t tensor_data13[6] = { 846, -415, -461, -387, 201, 274, };
const TfArray<1, int> tensor_dimension13 = { 1, { 6 } };
const TfArray<1, float> quant13_scale = { 1, { 0.00024844170548021793, } };
const TfArray<1, int> quant13_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,1,100,13 } };
const TfArray<1, float> quant14_scale = { 1, { 0.037322930991649628, } };
const TfArray<1, int> quant14_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,1,100,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.023345999419689178, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,100,1,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.023345999419689178, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,50,1,8 } };
const TfArray<1, float> quant17_scale = { 1, { 0.023345999419689178, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,1,50,8 } };
const TfArray<1, float> quant18_scale = { 1, { 0.023345999419689178, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,1,50,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.03015214204788208, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<4, int> tensor_dimension20 = { 4, { 1,50,1,16 } };
const TfArray<1, float> quant20_scale = { 1, { 0.03015214204788208, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<4, int> tensor_dimension21 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant21_scale = { 1, { 0.03015214204788208, } };
const TfArray<1, int> quant21_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,400 } };
const TfArray<1, float> quant22_scale = { 1, { 0.03015214204788208, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfArray<2, int> tensor_dimension23 = { 2, { 1,16 } };
const TfArray<1, float> quant23_scale = { 1, { 0.044436387717723846, } };
const TfArray<1, int> quant23_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const TfArray<2, int> tensor_dimension24 = { 2, { 1,6 } };
const TfArray<1, float> quant24_scale = { 1, { 0.057050980627536774, } };
const TfArray<1, int> quant24_zero = { 1, { 40 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const TfArray<2, int> tensor_dimension25 = { 2, { 1,6 } };
const TfArray<1, float> quant25_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant25_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 14 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 14,6,7 } };
const TfArray<1, int> outputs1 = { 1, { 15 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 15,2 } };
const TfArray<1, int> outputs2 = { 1, { 16 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 16 } };
const TfArray<1, int> outputs3 = { 1, { 17 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 17,3 } };
const TfArray<1, int> outputs4 = { 1, { 18 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 18,8,9 } };
const TfArray<1, int> outputs5 = { 1, { 19 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 19,4 } };
const TfArray<1, int> outputs6 = { 1, { 20 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 20 } };
const TfArray<1, int> outputs7 = { 1, { 21 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 21,5 } };
const TfArray<1, int> outputs8 = { 1, { 22 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 22,10,11 } };
const TfArray<1, int> outputs9 = { 1, { 23 } };
const TfLiteFullyConnectedParams opdata10 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs10 = { 3, { 23,12,13 } };
const TfArray<1, int> outputs10 = { 1, { 24 } };
const TfLiteSoftmaxParams opdata11 = { 1 };
const TfArray<1, int> inputs11 = { 1, { 24 } };
const TfArray<1, int> outputs11 = { 1, { 25 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1312, (TfLiteIntArray*)&tensor_dimension0, 1300, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 312, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 6400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 24, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 1300, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1312, (TfLiteIntArray*)&tensor_dimension15, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension17, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension19, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension21, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension23, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension24, 6, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension25, 6, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 26;
  for (size_t i = 0; i < 26; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 12; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 12; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  25, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 12; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
