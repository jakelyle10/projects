/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 11.12.2022 21:54:42

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 3472;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[29];
TfLiteEvalTensor tflEvalTensors[29];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[13];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,1300 } };
const TfArray<1, float> quant0_scale = { 1, { 0.037322930991649628, } };
const TfArray<1, int> quant0_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 100, 13, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 100, 1, 8, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 50, 8, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 50, 1, 16, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data5[2] = { -1, 400, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data6[8*1*3*13] = { 
  /* [0][0][][] */ -119,48,-119,86,116,-78,39,61,82,-63,-30,86,19, 63,-13,-99,-14,21,-13,-63,-107,42,-27,2,81,126, -127,-2,-23,-45,-70,16,-73,-55,108,55,-119,-77,42, 
  /* [1][0][][] */ 34,29,-43,-31,-25,16,11,-122,-39,94,-1,-92,116, 71,25,76,10,-40,30,-11,-108,52,-52,-108,82,41, 25,50,-59,127,-71,-85,31,-65,-65,-70,-20,-49,19, 
  /* [2][0][][] */ 41,-118,-70,107,-109,-116,-98,93,-19,-6,44,119,92, 72,-60,-74,40,-2,-69,91,-89,9,11,47,-59,-3, 23,-127,-62,-26,-106,-24,90,-111,-17,93,-12,-44,59, 
  /* [3][0][][] */ -99,121,-36,93,77,-127,-5,79,-58,33,37,-18,43, 65,104,-54,82,24,-122,-46,18,48,99,-69,53,26, -39,-21,-44,94,47,-17,-1,-50,-16,29,-67,66,-13, 
  /* [4][0][][] */ 41,68,-34,36,68,-65,6,14,-69,16,12,98,-39, 94,28,-53,11,-85,-25,-61,16,-13,16,-96,51,2, 48,-16,105,-107,-32,-54,67,-31,-82,-66,80,127,-83, 
  /* [5][0][][] */ 91,40,29,18,-21,10,-47,-28,53,-68,-29,26,29, 18,2,35,45,32,-8,58,9,39,43,-32,5,-75, 127,-20,-20,46,53,73,-64,-11,-21,37,-10,-31,-62, 
  /* [6][0][][] */ -127,-70,-114,-86,4,-39,94,42,-114,82,-48,41,79, -74,49,28,104,-11,-61,-97,-44,-21,11,77,-63,-53, -108,-45,95,-28,-98,-116,-65,104,-38,94,3,-102,-19, 
  /* [7][0][][] */ -14,-70,1,34,35,-100,-24,52,-47,58,-57,-30,30, 116,-26,42,-50,-7,38,-92,74,-63,73,90,80,81, -34,-127,70,66,-72,-49,44,-59,-83,-15,113,-58,51, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,3,13 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0024582755286246538, 0.0026985818985849619, 0.0025085844099521637, 0.003228604793548584, 0.0033670375123620033, 0.0036652730777859688, 0.0025461341720074415, 0.0031021195463836193, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { -448, -256, -440, 118, 230, 93, -193, 10, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 9.175005106953904e-05, 0.00010071898577734828, 9.3627721071243286e-05, 0.00012050099030602723, 0.0001256677060155198, 0.00013679872790817171, 9.5029186923056841e-05, 0.00011578019621083513, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[16*1*3*8] = { 
  /* [0][0][][] */ -31,18,-47,127,-23,-70,74,-46, 91,5,-42,20,-22,-48,30,-32, 68,-27,74,93,22,69,52,14, 
  /* [1][0][][] */ -93,127,-77,-30,2,-21,69,67, -114,-11,-34,62,-41,49,-10,1, 26,115,17,107,79,-1,-73,15, 
  /* [2][0][][] */ -75,87,-83,-47,35,104,-69,-109, 127,6,-59,121,46,-54,-83,52, -8,-72,-57,-83,71,69,52,2, 
  /* [3][0][][] */ -65,59,13,-8,-28,100,-64,119, -95,1,26,112,87,118,78,-21, 9,-127,55,-11,-65,84,41,-50, 
  /* [4][0][][] */ 4,52,105,-11,41,-80,-54,49, -127,7,36,-23,-50,-87,17,115, 53,-55,106,108,-45,75,-63,114, 
  /* [5][0][][] */ 58,-64,-114,55,126,113,1,87, -110,-98,-127,63,110,124,-101,-51, -48,-11,57,4,125,46,-123,98, 
  /* [6][0][][] */ 66,37,37,72,11,61,-66,52, 20,25,24,-91,11,127,-41,-121, -38,93,-19,-8,82,-29,-25,-30, 
  /* [7][0][][] */ -66,-75,80,-36,-46,95,87,38, 47,-77,-35,31,106,24,92,-127, -90,-98,-61,22,63,39,-23,77, 
  /* [8][0][][] */ -72,-81,83,-45,-34,-76,16,127, -7,-75,-107,102,62,0,76,93, -20,-108,60,-79,-18,-100,127,29, 
  /* [9][0][][] */ -27,-81,62,22,122,98,-114,-25, -10,127,105,-72,59,57,105,-48, -85,22,79,24,60,-22,50,18, 
  /* [10][0][][] */ -4,8,54,3,-2,-107,-76,46, 72,31,-17,47,127,23,85,-76, -21,-2,-42,-124,-46,-34,88,-53, 
  /* [11][0][][] */ 18,-44,-51,88,-59,-108,88,2, 3,102,51,-8,-65,-20,26,103, 31,20,-127,93,101,-127,90,31, 
  /* [12][0][][] */ 72,-31,-115,-52,24,76,30,-119, -35,-35,127,-16,79,-121,77,42, -21,20,-39,-62,-38,59,17,87, 
  /* [13][0][][] */ -1,36,-83,118,-105,-94,15,-70, -69,-52,10,-38,81,28,-58,-120, -36,-127,-96,86,10,57,122,-54, 
  /* [14][0][][] */ 34,29,71,59,-105,127,-44,-125, 28,44,-84,22,102,-15,-12,-73, -41,86,52,-48,-23,82,23,-5, 
  /* [15][0][][] */ 127,23,-39,89,-91,-95,-97,-60, -51,21,-18,-100,92,64,102,-34, 65,-95,43,-107,-57,37,-116,26, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant8_scale = { 16, { 0.0034548691473901272, 0.0028922383207827806, 0.0024228526744991541, 0.0022846620995551348, 0.0025769523344933987, 0.0024441287387162447, 0.0030219813343137503, 0.0026888074353337288, 0.002380091929808259, 0.0026197782717645168, 0.0024898310657590628, 0.0024665053933858871, 0.0022652726620435715, 0.0022224877029657364, 0.0026895790360867977, 0.0022190671879798174, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[16] = { -127, -336, 479, -595, -1041, 209, -664, -317, -531, -84, -1337, -684, -531, 989, 51, -272, };
const TfArray<1, int> tensor_dimension9 = { 1, { 16 } };
const TfArray<16, float> quant9_scale = { 16, { 8.4083396359346807e-05, 7.0390284236054868e-05, 5.8966539654647931e-05, 5.5603304645046592e-05, 6.2716964748688042e-05, 5.9484347730176523e-05, 7.3547918873373419e-05, 6.5439249738119543e-05, 5.7925841247197241e-05, 6.3759245676919818e-05, 6.0596634284593165e-05, 6.0028942243661731e-05, 5.5131411500042304e-05, 5.4090127378003672e-05, 6.545802898472175e-05, 5.4006879508960992e-05, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[32*400] = { 
  -38, 33, 6, 14, -2, 9, 35, 91, 1, -20, -31, -3, -7, 57, 80, 25, 27, 18, 36, -35, -35, -48, 56, 48, -22, 77, -48, 29, -24, -15, -9, -34, 25, 63, 6, 21, -14, 49, 0, 52, -63, 38, -8, 10, 8, -5, 21, 42, -53, 8, 35, 76, -10, 125, -35, 36, -21, 27, 77, 35, 9, 51, 7, 12, 3, -14, -15, 68, -17, 69, 22, -16, 9, 50, 12, 21, 23, -32, -25, -5, 10, -16, 3, -4, -19, 37, -25, 39, 54, 64, -12, -57, 40, -32, 49, -33, 14, -28, -13, 70, 15, -21, 2, -20, -58, 16, -77, 31, 54, -77, 10, 39, -36, -11, -14, -47, -59, -24, 13, 11, 31, 22, 68, 21, -62, -79, 13, 19, -49, 7, -34, 12, -44, 26, 27, -66, 52, 24, -47, -21, -15, 41, -42, -38, 31, -7, 3, -5, -26, -25, -13, 39, 19, 3, 34, 58, -42, -50, -62, 69, -78, -8, -64, 20, 4, -32, 23, -89, 14, 0, 36, -34, 17, -71, 4, -15, 28, -12, -36, 44, -21, -18, -67, 7, -29, 8, 67, -61, 10, 32, 43, -43, 61, -40, 36, 11, -18, 7, 25, 22, 17, -9, -2, 13, -1, -107, -70, -19, -36, 14, 14, 22, -20, 11, 46, -31, -5, -66, 31, -54, 14, 53, -1, -5, 35, -1, -35, -67, -16, -67, -46, -3, -11, -73, 3, -19, -38, -36, -19, -64, 49, -45, -42, 48, 19, -67, 87, -12, -74, 37, 30, -2, -17, -32, 72, 32, 127, 31, -26, -1, -49, -76, -16, -26, 49, 3, 25, -13, -5, -71, -9, 14, 54, -85, 31, -53, 10, -67, 24, -29, 0, 51, -14, 60, 56, 0, 62, -4, 53, 38, -1, -23, -53, 24, 20, -16, 49, -17, 3, 25, -81, 1, -67, -16, 32, -69, 44, -43, -50, -26, -63, 48, 36, -83, 4, -1, 7, 21, 56, 12, 55, -40, -57, -55, -92, 9, 7, 12, -61, 40, -45, 42, 80, 15, 77, 48, -20, -9, 30, 45, -38, 23, -20, 23, 19, -29, 39, -40, 17, -83, -18, -50, -36, 39, 2, -9, 27, 29, 35, -10, 42, 21, 31, 5, 8, 52, -1, 9, -51, 59, 8, 71, -7, 37, 87, 70, -10, 47, 1, -54, -34, 23, -4, -60, -80, -6, 58, 33, 25, 18, 58, -9, 9, 51, 53, -49, 9, 53, -29, -40, 
  18, 17, -56, 10, -48, -39, -9, -35, -41, 38, -7, 10, 37, 8, -14, -60, 30, -16, 19, -56, -28, 34, 34, 5, -6, 31, -16, -33, 8, 11, -51, -34, -18, 37, 15, -51, -50, 25, -26, -35, -27, -21, -44, 22, -47, 0, -59, 19, -56, 24, 23, -17, -6, -44, -3, -13, -11, -56, 32, 29, 6, -40, -42, -1, 25, -8, 18, 8, 18, 16, -29, -39, -67, 3, -49, -63, 29, -41, 6, -22, 14, 23, 31, -36, -20, -37, 14, -68, -12, 24, 23, -13, -48, -18, -52, -2, 43, -7, -11, -23, -41, 3, 30, 33, -11, -16, -19, -36, -29, -46, 33, -61, -17, 26, 15, -56, -23, -49, 2, 33, -58, -35, 13, 1, -36, -12, -28, -15, -14, 9, 22, -27, 7, -55, -44, -37, 38, -58, 19, -19, -62, -33, -26, 35, -46, -66, -66, -33, -39, -53, 3, 16, -57, 2, 30, -46, -36, -49, 6, -40, -35, -19, -53, 4, 35, -64, -66, -16, -11, -56, 15, 1, 36, -30, -9, -36, 3, -33, -36, 32, -54, -22, 32, -43, 24, -46, 15, 23, 19, 12, 33, -48, 23, 1, -22, 21, -38, -69, 16, -32, -30, 24, 18, 27, 38, -56, -48, -37, -22, -17, -57, -22, 46, -38, -33, -37, 45, -43, 17, -22, 30, 2, -3, -32, 41, -53, 23, -24, 43, -56, 30, 3, -48, 28, -7, -8, -11, 60, 3, 37, -44, -15, 10, -31, -7, -67, -28, 6, -64, -42, 24, 28, -44, -37, -25, -19, 14, -20, -64, -57, -16, -9, 23, 39, 41, 14, -20, 34, 37, 20, 30, -8, -48, 40, -6, 19, 47, 34, -16, 10, -34, -66, -66, -5, -30, -19, 3, -1, 18, -58, 1, -65, 29, -32, -25, 23, -14, -53, -7, 5, -63, -14, -47, -10, 0, -56, 10, 8, -63, 19, -48, 18, -5, -7, -42, -13, -52, -33, 27, 16, -37, -56, -40, 15, 40, 14, -15, -33, 22, 18, -9, -47, -10, 33, 24, -55, 6, 8, -46, 40, -24, 31, 13, -57, 12, 21, -67, 35, 16, 34, -43, -69, -68, 28, 5, -59, -42, -6, -54, -45, -5, 44, -18, 21, -32, -53, -57, -53, 8, 11, -26, -13, -9, -54, 32, -16, 32, -31, -31, -42, 37, 34, 22, -3, -46, 20, 31, -47, -62, -56, 27, -39, -45, 0, 5, -35, 12, 31, 19, 10, 
  -69, 28, 48, -62, 9, 16, 12, -14, -52, -64, -13, 8, -42, -51, -62, -30, -44, 7, -8, 30, 37, -24, 54, -41, 17, 41, 5, 3, -52, 17, 57, -30, 3, -53, 11, -32, 30, 16, 32, -26, -66, -10, -12, -1, 27, -19, -42, -52, 18, -37, 46, 24, -54, 68, -41, -28, -40, 20, -47, 24, 0, 20, -15, -37, 64, -9, 29, 37, 16, -40, -34, -58, -11, 7, 41, -3, -65, 25, 2, -68, -45, 49, -18, -51, 60, -15, -47, 67, 27, -58, 3, -44, 34, -65, 38, -51, -39, 3, 26, 24, -45, 26, 24, 2, 17, -34, -20, -13, -34, 26, -34, -43, -69, 7, -6, 18, 10, 25, -36, 39, 15, 4, -47, -48, -57, 17, 21, -42, -36, -41, -14, -23, 17, 8, 38, -27, 5, 32, 38, -15, 19, -36, -12, -47, 6, 17, 43, 13, -5, -23, -49, 10, -26, -54, -66, -54, 38, 37, -59, 24, 35, 5, 11, -17, -24, 21, -9, 36, 26, 5, -69, -62, -17, 10, 26, 59, -42, -55, 12, -28, -62, 22, -68, -55, -13, 58, 25, -27, -2, 13, 23, -41, -37, -48, 32, -59, 1, -67, 32, -53, -44, 11, -17, 9, 34, -24, -36, 13, -35, 26, 26, -23, 6, -33, -42, -59, -11, 42, -28, -29, -10, -11, 42, 5, -22, -11, -32, -64, -59, -46, 32, 50, 54, 47, -53, -7, -53, -54, -5, -64, -25, 27, 31, 20, 39, 50, 15, -25, -7, -38, -41, -65, -68, -19, 25, 25, 34, -17, -9, 1, -24, 14, -49, -25, -11, 7, 35, 13, -33, 41, -42, -5, -53, 17, 31, -46, -27, -12, -6, -22, 0, -7, -66, 12, 13, -24, 53, -66, 4, 1, 23, -68, -61, -51, 32, -26, -53, -21, -62, -38, 3, -25, -40, 17, -20, 31, -11, -24, -44, -25, -63, -10, -46, 8, -1, 23, -47, 30, 4, 41, -37, 9, 30, -63, 21, -24, 14, -28, 23, -49, -5, 18, 19, -13, 20, -26, 64, -28, -25, -7, 54, 16, -59, -67, 8, 38, 36, 4, -13, -21, -10, -16, 35, -56, -7, -52, -31, -6, -32, 21, 38, -66, -12, -56, 30, 17, -19, 55, 0, -52, 7, -23, 21, -7, 57, 17, 1, -41, 22, -54, -53, -23, -30, -3, -56, 1, 38, -65, 29, -10, -9, -14, -60, -36, 19, -37, -58, -23, 12, -38, 
  -41, -115, -35, 40, 33, -24, 23, -41, 53, 10, 48, 27, 63, -38, 8, 9, 5, -12, -85, -30, 49, -80, 13, -85, -1, 0, 6, -41, 17, -64, 17, -68, 13, -8, 74, -45, 5, -28, 10, -19, -5, -81, 76, -39, -9, -64, -22, -44, -16, -54, -16, -37, 23, -96, -64, -19, -21, -93, -9, -16, -15, -79, -72, 9, -59, 33, -6, -58, -42, -14, -20, -32, -23, 14, 5, 38, -53, 8, -53, -8, -2, -41, -20, 45, -18, 58, 13, -36, -61, -17, 15, 22, 3, 53, -15, -11, -3, 29, 24, -59, -48, 24, 40, 72, 18, 45, 1, -38, -59, 11, 7, -55, 43, -13, 0, -1, 69, 89, 31, 92, 11, -34, 28, -43, -35, 26, -22, 10, 13, -1, 38, -20, 19, 25, 84, 39, -31, -43, 38, 3, 33, -38, -16, 47, -34, 28, 96, 76, 9, 52, 47, 24, -50, -16, 73, 22, -44, 42, 42, -16, 31, 14, 10, 73, -31, -7, 80, -35, -49, 96, 0, -52, 45, -29, 33, 31, -6, 48, -59, 12, 1, 17, 53, 9, -3, 13, -32, -27, 20, -43, 56, 19, 20, 84, 25, -22, 8, 54, 65, 49, -58, -21, -16, -21, -1, 16, 95, -28, 103, 31, 43, 50, -32, 10, -19, 100, 4, 4, -46, 19, 24, 78, -10, -30, 72, 27, -44, 81, 21, -29, 21, -28, 76, 14, -8, -7, 66, 4, 80, 14, 24, -42, -15, -37, -6, 22, 4, -66, 7, 4, 13, 31, 32, -30, -44, 39, -31, -35, 9, 4, 14, -16, -21, 17, -47, 59, -20, -49, -37, -85, -32, -6, 35, -33, -90, -23, 45, -67, -45, -26, 33, -58, 43, -10, -45, -4, -73, 11, 1, -3, 41, -44, 25, -26, -32, -28, 27, 30, 53, 50, -3, 4, 2, 46, 39, 25, -16, -68, -32, -59, -70, 59, 31, 26, -24, 67, 75, -56, 15, -66, -1, 16, -7, 17, 4, -27, -45, -89, 60, 14, -22, 59, -55, -102, -53, -15, -23, 10, -57, -26, 17, -69, 16, 29, -5, 7, 28, -14, -12, -55, 0, -41, -4, -52, -80, 11, 53, 65, -19, 1, 58, -17, 44, -10, 56, -89, -70, -57, 15, 13, -7, -12, -26, -30, -10, -75, -40, -72, 44, -41, 4, -19, -24, -34, 17, 70, 5, -52, -47, -27, 50, 5, -46, -13, 2, -34, 31, 17, 12, 58, 
  -18, 14, -46, 32, -8, 11, 34, -39, -4, 28, 7, -32, -41, 31, 24, -24, 11, -67, 12, -54, -30, -21, 35, 30, -17, 18, -66, -32, -28, 46, 21, 4, 6, -33, -62, -39, -46, -30, 34, 46, 19, -56, -10, 30, -45, 50, -14, 29, -51, -66, -51, -37, -10, -37, -43, -27, -10, 3, 36, 29, -61, 19, 24, 33, -2, -4, -22, 33, 31, 6, 39, 25, -42, -30, 31, -66, -64, -4, -51, -4, 3, -65, -8, -40, -18, -50, -65, 7, -4, 40, -36, -47, 12, 6, -37, 25, -67, -48, -34, -46, 20, 48, -63, -16, -34, -57, -1, -39, -40, 33, -32, 27, -40, -58, 11, -15, -19, -31, -56, 35, -52, 23, -45, -44, 6, 41, -39, -66, -62, 34, 5, -33, 3, 27, -38, -18, -28, 27, -62, -22, 22, 43, 34, -2, -15, -18, 23, 28, 9, -45, -59, -22, -30, -57, 12, 7, 6, 12, -57, 7, 14, 4, -10, -31, 32, 12, 19, -52, 3, 5, 41, -30, -57, 49, 30, -26, -26, -28, 51, 11, 13, -46, 4, -23, -16, 37, 52, 14, 20, -48, -31, -38, -34, -25, 51, -10, -4, 41, -41, 10, -7, -35, -15, -2, 13, 13, 28, -8, -30, -51, -58, 17, -5, 3, -64, 34, -46, -42, -61, -26, -19, -43, -29, -35, 25, -53, -13, 33, -50, -51, 35, -23, -13, -42, 21, 31, -26, 29, -48, 11, 32, 32, -24, 2, -40, -13, -54, -22, -7, 0, -33, 14, -48, -23, -7, -67, -16, -5, 11, -2, -52, -42, -8, 26, -40, -47, -58, 14, 20, 43, 2, -2, 19, 32, 10, 7, -64, -1, -24, 28, -52, -8, 21, 34, -32, -48, -12, -13, -61, -8, 0, -28, -37, -30, 4, 30, 16, -44, -44, 27, 43, -3, -20, -26, -37, 0, 11, 39, 4, -62, -12, -31, -6, -1, 11, -4, -20, 10, 26, -67, -48, 21, 16, -28, 37, 32, -62, -44, -44, -42, -65, -34, -50, -43, 29, 37, 35, 5, -56, -64, 8, -54, -65, 38, 3, -25, -3, -53, 43, 37, -40, 23, -62, -38, -20, -30, -4, 48, -21, -8, -21, 5, -47, 8, -29, 36, 23, -24, -11, -58, 14, -3, -52, 24, 20, 11, 36, 2, -29, 9, 27, -44, -17, -51, 26, -31, -69, -19, 14, -26, -37, 46, 0, -34, -66, -44, -43, -37, -9, -3, 
  28, 29, 57, -26, -32, -3, 36, 14, 1, -22, 54, 24, -35, 24, 7, 51, 64, -36, -52, 6, -17, -74, -37, -86, 44, -19, 46, 10, -15, 40, 24, 35, 23, -8, -49, 17, 55, -75, -30, 33, -34, -55, -42, -36, 47, 18, -7, -22, 33, -29, -43, -40, 12, -12, -26, -40, 94, -12, -15, -20, -10, -50, -90, 12, 2, -16, -27, 11, -36, 24, 1, 30, -29, -34, 1, -15, -68, 25, -40, -17, 49, -12, 18, -6, 18, 4, 53, 8, -37, 35, -12, -28, 25, -8, -43, 48, 2, 1, 35, -45, 36, 56, -1, -3, -43, 22, 13, 24, 25, 19, 15, 15, 12, 26, 12, 64, 69, 53, -3, -44, 33, -22, 17, -23, 54, 2, 35, -43, 41, 42, -61, 0, 60, 74, 83, 57, -44, 61, 27, 24, 49, 37, 14, 20, 3, 32, 15, -30, 30, 41, 43, 15, 28, 32, -4, -4, -11, -3, 52, 15, 0, 27, -12, 76, 16, -22, 20, 13, -27, 49, -5, -5, -29, -36, 97, -32, -72, 84, -8, -44, -26, -21, 74, 54, -9, -38, -86, -49, -27, 3, -14, 2, -27, 58, 26, 1, 61, 43, -10, -29, 45, 7, -56, 20, -30, -7, 56, -51, 37, -5, 39, -11, -4, 38, 63, 8, 59, -10, 5, 64, -49, 47, -2, 55, -74, -9, 40, 10, -63, 9, -40, -32, 29, -47, 51, 34, -8, -3, 21, -12, -27, -16, -32, -1, 7, 46, 16, -17, -36, -50, -52, 33, 37, 26, 47, 37, -58, -20, 82, -37, -47, -17, 46, -18, 56, -43, -31, -12, 4, 11, 8, -17, 37, 35, 16, 43, 27, 25, -44, 6, 21, -61, -74, 39, 24, 49, -8, -15, 9, -71, 25, 16, -16, -27, -3, 63, 36, 14, 14, -27, 6, 57, -53, -35, -22, -5, -22, -81, -42, -28, -48, 2, 16, -2, -11, 69, -44, 45, 25, -1, 44, -29, -34, 5, 46, -74, 20, -55, 67, -47, 41, 15, 21, 5, -53, 31, 1, 5, 50, 31, -16, -6, -17, -6, 22, -7, 30, 7, 46, 5, 28, 48, -1, -60, -63, -72, -19, 11, -5, -36, -9, -41, -7, 4, -24, 12, -96, 37, 32, 12, 1, -65, -52, -71, -56, 36, -6, -7, 4, 52, -89, 32, -5, -64, -8, 36, -41, 10, -31, 1, 57, -11, 32, -22, 7, 38, 37, -34, 18, 1, 
  -49, -55, -59, -5, -64, -37, -4, 14, 7, 13, 4, -11, -40, 30, -16, 6, 25, 7, 27, -45, -23, 42, -59, 5, -9, 17, -65, -14, -45, 34, -53, -51, 45, 12, -60, -67, 13, -15, 16, 3, 14, -51, -12, 11, -9, 17, 34, -63, 21, 28, 23, 2, -34, -45, -29, -58, -28, -15, -67, -23, -1, 30, -53, 15, 42, -37, 51, -40, -24, 14, -41, -56, -57, -63, -56, -37, 19, 3, 40, -14, -67, -2, 21, 30, -27, -7, 13, 32, -13, 36, -19, -60, -5, -34, -14, -17, 7, -9, 26, -35, -1, 1, -35, -54, -24, -6, -37, -22, -41, -43, -26, -36, 0, -43, 27, -7, -33, -31, 8, -10, 27, -31, -21, 23, -60, -44, -4, -28, -46, 21, 13, -48, 33, -56, 24, 38, 52, 19, -44, 0, -28, -18, 29, -18, -18, -33, -65, 16, -68, 1, 19, 10, -25, -8, 1, 8, 34, 4, 6, -32, 35, -24, -30, -21, -43, -65, 5, -61, 33, -33, 19, -4, 21, -10, 7, -47, -4, 3, -51, -33, -27, -28, -55, 5, 21, 23, -5, -15, 1, 30, -32, -3, 5, 33, -67, -36, 3, 9, 12, 17, -47, 4, -18, 33, 38, -8, -57, -53, -45, 31, -40, -7, 19, -1, -5, -54, 25, 35, -53, -47, -63, -40, 38, -12, 40, 16, -49, -16, -15, 11, 11, -62, -25, 18, -30, -11, -66, 29, 24, -46, -43, 12, -18, -12, 9, -53, -12, -29, 18, -26, -63, -55, 8, 37, -21, 16, 32, -55, 15, 36, -2, -32, -2, 14, -33, -37, -48, -27, 3, -25, 21, 7, -25, -6, -29, 36, -33, -54, 28, -11, -11, -32, 7, -47, -10, 5, 12, 24, -50, -38, -22, -37, -67, -30, 26, 21, 13, 1, 43, -13, 41, -38, 7, -43, 16, 25, -32, -31, 11, -25, -26, -5, 17, -8, -31, -50, -14, -6, -25, -53, 6, 3, -20, 20, -30, 15, -11, -47, 8, 16, -37, 13, 37, -38, -17, -39, -30, -60, -15, -24, -48, 17, 40, -24, 21, -68, -58, -60, -51, 44, -6, -47, -53, -56, -7, 9, 39, 2, 1, -39, -21, 30, -15, -54, -53, -23, -59, -25, -3, 27, 13, -66, -55, 10, 15, -67, 10, -21, 32, -57, -56, -24, 5, 41, -45, -52, -18, -31, -58, -28, -42, -12, -1, 7, -55, -2, -32, -25, -13, -57, 
  31, 49, -12, 25, -68, -21, 1, -49, 25, 37, 6, 27, -42, -46, 51, 31, -18, -45, -14, -47, -16, 5, -31, -60, -8, 14, -29, 29, -66, -10, -49, -49, -21, -43, 5, -25, 11, 5, -47, 31, 22, -30, -27, -33, 4, 50, -67, -5, -27, -39, -7, 0, -17, -47, 3, -31, -9, -46, -44, 6, -9, 23, 33, -4, 8, 8, -48, -2, -39, 5, 29, -57, -40, -33, -63, -32, 33, -36, 6, -39, 3, -8, 2, -16, -33, -41, -20, -48, 18, -4, -62, -48, -2, 49, -39, -48, -44, 15, 31, -65, -22, -24, -17, 33, -64, 20, -40, -56, -38, 23, -18, -25, -40, 12, 27, -52, 19, -25, -14, -8, -9, -25, 10, 31, -3, -45, 35, -8, -25, -36, -41, -42, 27, -36, -31, -54, 20, -36, 8, -1, -65, 19, -10, 8, -41, 12, -37, -17, 27, 25, -1, -45, 18, -10, -11, 10, -66, 44, 21, -21, 36, -28, 40, -13, -7, -43, 20, -17, 34, -56, -27, -66, -21, -50, -52, 18, -4, -54, -27, -62, -62, -32, -17, -67, 5, 15, -60, 39, -3, 33, -4, -40, -39, 5, -24, -4, 32, -5, -46, -66, 12, 24, -40, 11, 13, -10, -20, 34, -69, -18, -3, -57, 14, -24, -56, -40, -65, -44, -30, 24, -67, -29, 9, 35, -39, 14, 34, 28, 17, -62, -69, 21, -3, 16, -43, 9, -52, -55, -7, 0, 21, 21, -38, -31, -33, 9, -26, -45, -47, 17, 14, -22, -53, -36, 13, 37, 14, -53, -27, -45, -45, -16, 29, -55, -24, -14, -14, -23, 28, 30, -8, -21, 39, 10, 7, 17, 2, 21, 0, 9, -10, -35, 14, -52, -5, 41, -51, -46, 6, -22, -10, -11, -55, 27, -7, -33, 36, 23, -45, -6, -44, -4, 42, -42, -1, -42, 36, -57, -52, -46, 34, 2, 33, 37, -18, -51, 44, -69, -43, 18, -32, -54, -1, 28, 16, -37, -20, 33, -21, -2, 13, 2, -68, -55, -17, -55, -54, -13, -50, -45, 16, -56, 4, 25, 34, -17, -63, -37, -50, -3, 13, -40, -22, 25, 13, 39, 28, -29, -59, -22, -37, 31, 8, 26, -29, -15, 18, -41, -4, -2, -42, 8, -58, -26, -37, 18, -43, 3, -64, -59, 16, 37, 39, -56, -51, 8, 0, -17, -43, -42, -68, 30, 29, -35, 23, -43, 0, -18, 22, 38, 
  0, 12, 12, 45, 37, -39, -8, -19, 31, -14, -38, -51, 50, -77, 54, 18, -79, -82, -64, -43, -9, -52, -16, -4, 44, 36, -24, -10, -21, -70, -2, 24, -60, 10, -57, -11, 12, -52, 0, 13, 36, 19, -20, -7, -1, -72, -65, 9, 35, 6, -23, 19, 27, -13, -21, -28, -1, -11, -34, 45, 38, -37, -57, -48, -54, -24, 40, -25, 48, -63, -41, 5, -50, 22, -34, -40, 9, -56, -74, 21, 4, 17, -32, -37, -41, 40, -25, 42, -28, -48, 9, -12, -17, -35, -26, 41, -7, 41, 3, -19, 4, 7, -21, 36, -38, 47, 18, -68, 39, -66, -4, 36, -28, 17, 2, -39, 27, 74, 50, -25, 16, 17, -1, -24, -5, 24, 2, 23, 33, 40, 49, -25, 7, -12, 24, -26, -53, 40, 46, 20, 10, 6, -22, -26, 7, 70, 53, 51, 58, 55, 28, 28, -53, 31, 32, -45, -13, 17, 52, -2, 0, 27, 36, -1, 6, -26, 1, -40, -32, 26, -20, 25, -41, -7, -34, 13, -28, 8, 14, 36, 53, 19, 5, -38, -34, 24, -15, -15, -51, 49, 36, 13, 13, -30, -26, -35, 46, 23, -28, 17, 37, 3, -13, -19, 48, -43, 36, -69, 65, 95, -58, 11, 47, -44, -29, -77, 33, 46, -8, 68, 31, 67, 28, -36, 69, 96, 13, -18, 31, -21, 9, -84, -36, -19, 51, -7, -45, 29, 84, 20, -4, 50, 34, 39, -15, 32, -5, -13, 14, 44, 52, 11, -11, -6, 18, 35, 9, -33, 65, 37, 26, -52, 22, 55, 18, 56, 11, -12, -34, -58, -14, -35, 45, -26, -45, 34, 20, -18, 16, -63, -39, 26, 5, 61, 18, 1, -47, 14, 61, -25, 2, -58, 4, -44, -34, 15, 52, 20, 14, 0, 42, -5, 32, 15, 54, -56, -34, 46, -59, -73, -34, 65, -38, -12, -34, 9, -21, -18, 20, 24, 28, -45, -23, -45, -24, -18, -59, 21, 32, -5, -19, -33, 62, 31, 16, 6, -52, -8, 15, -25, 9, -34, -15, -7, 28, -40, -28, 21, 18, -78, -78, 15, -1, -71, 55, -34, -30, 22, -10, 34, 54, 9, 13, -11, 16, 18, -54, 23, 45, -63, -41, -22, -28, 8, 3, -32, -2, -42, -15, 20, -37, -28, -22, -18, -62, -41, -70, -1, 27, -38, -47, 33, 16, -27, -15, 28, -42, 20, -16, 39, 
  25, -60, -25, -62, -65, -7, -22, -12, -19, 34, 31, -68, 24, 21, 25, -59, 7, -58, -20, -16, -2, -15, -25, -41, -47, -55, 23, -38, 2, 16, -43, -23, -31, 16, -67, -33, 14, 22, 23, -33, 16, 8, -63, -8, -7, 8, 24, -40, 12, 16, 38, 15, -50, 28, -26, -35, -33, -46, -61, -36, -8, -35, 8, -9, 6, -42, -26, -4, -30, 10, -51, -3, 5, -13, -56, 7, -29, 15, 8, 4, 13, 2, -25, -54, -29, 9, 16, -20, -37, 33, -26, -4, 0, 43, -44, -38, -11, -46, -60, -50, 19, -7, -13, -35, -5, 23, 28, -54, 1, 32, -4, -34, -19, -72, -24, -45, -26, 8, -62, -54, -59, -18, -9, 21, -34, 23, -38, -20, -20, -56, -22, 8, -71, -23, -9, -62, 28, -32, 29, 34, -53, -39, -63, 32, -41, -8, 13, -44, 2, 32, -36, 20, -53, -39, 4, -19, -30, 17, 0, -64, -8, -6, 12, 24, 8, 22, -33, -60, -39, 14, -45, -74, -48, -36, -39, -3, -28, 19, -24, -17, -22, -73, 7, -12, -10, -54, -6, 26, -29, -32, 14, 36, -39, 37, -7, -22, -4, -69, 15, -50, -26, -65, -58, -67, -52, 8, -4, 14, 20, -8, 22, -50, -67, -67, -57, -67, -36, 9, -43, 17, -6, 9, 8, -7, -71, -49, -11, 8, -61, 36, 10, -58, 36, 29, -43, -39, -14, 6, -40, 16, -66, -71, -54, 20, -62, 12, -9, 29, -43, -9, 21, -55, -23, -11, 34, -46, -23, -54, -1, -46, -27, -64, 13, -47, -55, -20, 13, -52, -1, -36, -57, -24, -59, -52, -12, 35, -63, 6, -66, -50, -14, -28, -29, -69, -53, -66, 36, -1, -9, -32, 23, -41, -16, -39, -35, -13, -13, -35, 31, -25, -15, -35, -16, -21, 41, 29, 8, 30, -38, -55, -17, -53, 39, 1, -10, -50, -27, -18, -36, -68, -56, -2, -65, 32, -67, 17, -38, 25, -36, -27, 9, 25, -44, 54, 12, -41, 31, 24, -37, -64, -39, -13, -40, -57, 25, -6, -50, 19, 23, -4, -15, -49, -43, 38, -18, -8, -73, -17, -56, -58, -50, -18, -28, -59, -28, 18, -68, -68, 8, -69, 9, 13, -37, -6, -27, 33, 16, -52, -27, -16, 35, -23, -53, -44, 21, -2, -23, 5, -67, 40, -60, -17, 32, -38, -39, 0, 19, 14, 9, -43, 
  -39, 52, -49, 36, -32, -17, -53, -68, 5, -12, -56, 15, 25, -38, 15, 4, 43, 5, -25, -12, -35, 38, -61, -12, 56, -6, -26, -7, 49, 29, 8, -12, 4, -51, -60, -55, 44, -23, -75, -6, -33, -56, 25, -41, 50, -99, 24, -14, -44, 54, -38, -27, 3, -77, 9, 6, 1, -11, 17, 47, -48, -3, 17, -55, 18, 24, 0, 38, -50, -45, -19, -7, -55, -48, -32, 67, -37, -36, -58, 37, 14, -22, 23, -32, -41, -64, 44, -10, 48, -23, -26, 37, -30, -1, -39, -39, -20, -21, -45, -39, -38, 9, -1, -51, -17, 62, -10, -47, -1, 2, 26, -28, -2, 27, 44, -19, 70, 1, 3, -38, 27, -29, 3, 7, 51, 16, -14, 4, 10, 51, 9, 35, -65, -39, 73, -59, -5, 31, 4, -44, -79, -37, 31, 65, 6, 27, 107, 50, -76, 85, 2, 28, -64, -43, 36, -8, -26, -29, 62, 27, 22, 44, 30, -9, 27, 41, 1, -5, -31, 20, -22, -61, -39, 3, 49, 3, 34, -3, -31, 21, -24, 14, -26, 34, 0, -14, -3, -8, 11, -27, -31, -34, 29, -59, 33, -1, -3, -22, 73, 79, -82, 20, 7, -49, -60, 58, 42, -36, 20, 38, 44, -67, 23, 30, -39, 2, -39, -37, 29, 21, 17, -53, -30, 20, -4, 17, 38, 31, -4, -15, 63, 42, 5, 35, -8, -47, -48, 6, 36, -55, -36, -6, -20, 28, 36, -25, 18, 24, -45, 34, -72, 2, -47, 5, -29, -69, -48, -22, -29, 30, -13, 36, -1, 20, 43, 7, -58, -57, 18, 16, -14, -50, -39, -60, 35, 51, -59, -60, -22, 18, 32, -12, -11, -4, 25, 30, -28, -41, 37, -75, 25, 15, -11, -40, 11, 17, 75, 3, 65, -34, 51, 47, -57, 18, 22, 9, -76, 14, 5, -7, -67, 102, 11, -18, -30, -24, 17, 52, -39, 23, 36, -1, -47, 37, -11, 38, -2, 0, 26, -91, -27, 42, 45, -53, -79, -70, 33, -34, -12, -34, 43, -10, 53, -54, 62, -80, 22, 28, -65, 18, 22, -10, -27, 27, -7, 16, -66, 14, -31, 10, -12, 14, -10, -36, 8, 53, 56, 34, -45, -49, 3, 24, 1, -74, 12, 29, -16, -16, -9, 16, 34, -4, 47, 3, 31, 3, -38, -47, -37, -49, 9, -50, 24, 41, -4, 46, -36, -20, -27, 53, 
  15, -48, -18, -51, -16, -36, 33, -49, -40, -43, 2, -25, -68, -44, 20, -37, 41, -57, -53, -19, 36, -15, 19, -14, 41, -67, -29, -42, 9, -10, -62, 0, 0, 41, 10, -49, 32, 35, 37, -39, -16, -3, -38, -45, -10, -59, 0, 35, 31, 3, 30, -37, 22, -51, 35, -12, -18, 21, 4, -57, -53, 39, 20, -50, 11, -54, -20, -7, 22, 34, -65, -41, 4, 28, 15, -62, -35, 10, -31, -45, -10, -64, 6, -38, 5, -17, -1, -55, -18, -33, -25, 16, -62, 29, -54, -34, 9, -17, 30, -9, 32, 14, -19, 36, 19, -16, 16, 31, 27, -32, 13, -38, -40, 12, -21, -68, -42, -64, 2, -14, -1, 16, -16, 4, -20, 20, 6, 3, -30, -60, -15, 35, -52, -23, -35, -9, 35, 1, -4, -29, -33, -28, -41, -37, -33, -12, -18, -4, 9, 0, -37, -39, -37, -51, -22, -52, 26, -64, 30, -50, -47, 2, -58, 2, 2, -45, -43, -37, -53, -12, -17, -21, 22, 5, -27, -13, 15, -3, -38, -56, -26, -60, -4, -30, -56, -20, -42, 38, -23, -49, -46, 9, 21, -44, -4, 37, -30, -49, 39, -20, 26, -36, -34, -5, -34, 32, -62, 27, 12, -53, -16, -65, -2, -19, 8, -32, -46, -6, 11, 25, -32, -61, -30, 2, 17, 16, -1, -57, -24, -21, -43, -42, 36, 7, 36, 30, -66, 10, 27, -26, -2, 36, -21, -8, -8, -1, -53, -18, -37, -44, -53, -33, -29, -64, 66, 41, -8, -45, 14, 6, 0, 10, -17, 19, -6, 1, -24, -8, -31, 46, -4, -68, 33, 36, -22, -44, 17, -16, -40, 31, 33, -7, -39, -22, -67, 31, -22, 37, -64, 6, 34, 27, 21, 34, -20, -38, -30, 25, 24, -36, -33, -26, -41, -4, -42, -22, -41, -64, -31, 13, 41, 16, -23, -12, -9, -4, 40, 19, 0, -43, -24, -11, -5, -2, -44, 17, -59, -7, -33, -25, 33, 27, 4, -15, -3, 14, -65, -10, 15, -36, -51, 16, -10, 3, -28, -8, 23, -24, 15, 15, 23, 39, 1, -66, 23, 4, 39, -11, 4, 16, 14, -27, -56, -20, 14, 15, -52, -24, -64, 36, 39, -7, -22, -14, 9, -13, -25, 21, 18, -21, -13, -10, -28, -68, 4, -43, -62, -55, -60, -18, -60, -68, -32, 21, -58, 12, 41, -36, -38, -11, 
  13, -25, 30, -48, -14, 26, 41, -32, 10, -46, -58, 35, 18, -26, -7, -27, 34, 16, -64, 29, -37, 1, -60, 22, 6, -32, -50, -65, -43, 49, -58, -61, -21, -57, -31, -33, -66, 5, -23, -63, -14, -44, 32, -70, -20, -54, -26, -69, 36, -53, -39, -57, -3, 25, -14, 7, 38, 23, 1, -44, -46, 39, 15, -17, 41, -63, 42, 22, 4, 48, -65, -15, -35, 35, 29, -59, -69, 23, 0, -56, -58, -65, -29, 14, 5, 19, -20, -18, -25, -43, -66, 17, -60, 37, -28, -27, -3, -21, -6, -68, 1, -6, -45, 27, -3, -36, -53, -36, -28, -2, 24, 34, -50, 0, -22, -25, -61, 13, -59, 11, -19, -15, -18, -20, -38, -24, 36, -31, -68, -47, 32, -13, 8, 13, 16, -11, -26, 26, 10, -52, 16, -34, 34, 16, -26, -67, 8, 15, 11, 24, -49, 12, 13, -26, 21, 9, 30, 6, 1, 30, 9, 11, -61, 9, 17, -62, 42, -30, -50, 9, 27, -23, -3, -24, 31, -8, 45, -18, -6, -3, 33, -53, -34, 33, -16, 28, -32, 37, -2, 24, -42, 24, -49, -37, 2, -41, -42, -65, 32, -41, 17, -35, 22, 34, -10, 33, 33, 37, -30, -3, 0, -26, 12, -42, 15, 37, -57, -35, -37, 10, 20, 2, -14, -53, -13, 2, -56, 19, -23, -2, 12, 12, 6, 10, -35, 23, 4, -26, -46, 43, -59, -57, 27, 0, 22, -6, -65, 9, 25, 19, 29, -21, -54, -6, 18, -54, -17, 14, -17, -11, 21, 29, -49, 28, 8, -46, -3, -21, -37, 14, -18, -38, 0, 3, 29, -48, -26, 5, -8, 27, 18, -58, 21, 10, -63, 8, 21, -3, 3, 14, -13, 31, -53, -43, -4, -57, -12, 16, -50, 22, -58, -62, 7, -60, -13, -28, -63, -53, 8, -39, -37, -27, 2, -45, 32, 30, -4, -23, 45, -6, -26, 3, 20, -61, -22, -62, 19, 22, -1, -71, 4, -36, 14, -9, 26, -50, 20, -34, -67, -63, -24, -65, -39, 9, 19, -62, -44, -51, -46, -4, 30, -48, -6, 38, 0, -5, -28, -60, 43, 35, -35, 0, -48, 31, -8, -18, 17, 32, -52, 3, -54, -19, -65, -14, -35, 15, 24, -43, 15, 0, 17, -9, 11, 18, -3, -49, 7, -65, -14, -69, 26, 40, -49, 40, 1, 3, 36, -41, 8, -47, 
  24, -28, 2, -3, 27, 29, 29, 7, -38, 46, 68, 18, 1, 9, 5, -49, 38, 33, 3, 26, -63, -56, 2, -44, -45, -23, -9, 31, -72, 5, -64, -47, 70, 59, 19, -6, -47, -23, -52, -57, 9, -36, 7, -25, 22, 58, 14, 45, 65, 19, -42, -16, 38, 59, 39, 25, -8, 71, -31, 86, 40, -43, -12, 15, 73, 24, 22, -11, 64, 93, -52, 5, 13, 12, 16, 63, -28, 57, 44, -38, -19, 60, -12, 79, 46, -17, 59, 37, 3, 108, 54, -29, -22, -1, -31, -1, 62, -52, 32, 5, 20, -19, 11, 46, -49, -30, 31, 75, 37, 30, 27, -43, -23, -40, 40, -48, 5, 31, 6, 9, -53, -26, -18, -40, -31, 5, 66, 17, 36, -16, 67, -31, 14, -27, 76, -44, -15, -10, -14, 29, -30, 41, 100, 7, 27, 85, 53, -35, -48, -14, -55, 27, -27, 33, -4, 37, -53, 31, 43, 30, -31, 34, -22, 13, -21, 23, 16, 15, -19, -13, 20, 46, 60, 65, 38, -52, -45, 5, 5, 23, 32, 45, 11, 19, 4, -27, 21, -77, 24, 11, -20, 7, -72, -23, -7, -37, -68, 20, -9, -33, 12, -59, -1, -17, 6, -3, -24, 34, -61, -32, 36, -41, -56, -9, 25, 5, 31, 0, -35, -46, -52, -18, 65, 60, -23, -72, 40, 1, -14, 8, -41, 14, -55, -47, -32, -88, -42, -24, 24, 16, 27, -5, -17, -20, 44, -33, 28, -75, -24, -42, -24, -32, 8, -16, 25, -23, 2, 23, 42, 0, 7, 25, -71, -35, 6, 3, 17, 20, 36, -46, -5, -6, -24, -78, -38, 0, -44, -27, 12, -27, -21, 11, 7, -41, -29, 56, -46, 71, -63, -59, 55, -51, 17, 22, -57, 45, 5, -26, -6, -39, 61, 43, -15, 30, 3, -7, -56, -44, 30, -4, -50, -1, -2, -45, -51, 57, 58, 48, 42, 41, 14, 74, -8, -48, 10, -18, 15, 1, 31, -39, -35, 40, -43, 17, -46, -29, 24, 75, 24, 91, -57, -28, -45, 93, -35, 23, 39, 50, -15, 87, -9, -15, 50, 26, -17, 16, 9, 41, -7, 19, 33, -7, 50, -6, -14, 57, -26, -2, -2, -35, 49, 11, 14, 0, -39, 30, 23, -30, -72, -34, -50, 60, -26, -22, 5, -58, -15, 60, -41, 55, 61, 36, 42, -9, 57, -7, 45, 15, 35, -20, 
  37, -4, 43, -27, 29, -78, -44, -82, 66, -2, 66, 9, -41, 51, -56, -72, -3, 37, -71, -31, 60, -7, -61, -82, -26, -77, 58, 97, -30, -25, -58, -59, 40, 3, -2, 5, -8, -67, 19, -74, -1, -58, -22, -30, -67, -25, -27, 58, 91, -63, -70, -4, 26, -66, -77, -22, 36, -59, -7, 43, 3, -1, -15, -3, 52, 46, -71, -58, -4, -15, -11, 52, 7, -58, -58, 11, -11, 54, 6, 92, -15, -4, -50, 24, 41, -9, 27, 32, 3, -37, 15, 85, -9, 8, -16, -51, 59, -16, 45, 11, -54, 2, -45, -19, 31, -28, 36, 53, -39, 49, -20, 59, 82, 21, 18, 8, -12, 40, -19, -25, -18, -43, 29, -70, 48, -30, 30, 57, 17, -54, -16, -37, -16, 52, 31, -33, -14, -36, 65, 27, 27, 19, 41, 25, 54, -38, 18, -11, 38, -37, 26, -8, 34, -25, 16, -10, -37, 62, 50, -6, 104, 30, -2, 8, -23, 94, 50, 28, 20, 43, -17, -7, -45, 12, -32, 24, -76, -58, -1, 3, 27, 65, 16, -48, -8, 32, -15, 6, -2, -9, 69, 47, -29, -16, 32, 27, -27, -53, 37, 12, 38, 54, -10, -90, -1, 78, 51, -17, 16, 17, 85, -12, 59, 93, -2, -4, -3, 38, 3, -6, 32, 25, 62, -2, -15, -36, -15, 49, -36, 89, 42, 17, -9, 43, -12, -46, -4, -23, -50, -4, -50, -52, 11, -37, 74, -11, -11, 37, -22, 2, 34, 39, -14, -6, -3, 8, -7, 34, -34, 40, 53, 25, -10, 54, 14, -30, -19, -18, 31, -23, -12, 35, -54, 76, -38, 55, 18, 35, -18, -38, 38, -66, -3, -55, -16, 50, -82, -44, -43, -68, 37, -15, -55, 19, 22, -13, 18, -17, 18, -70, 30, 33, -64, -25, -28, -4, 20, -71, 7, -47, 76, -2, 21, 6, -38, 44, 5, -54, 8, -1, -20, 72, 46, 55, -3, -22, 43, 0, -10, 45, -40, 33, -7, -75, -19, -13, -2, 5, -4, -24, -24, 15, 47, 33, 13, -34, -73, -20, -47, 17, 38, 5, 29, -40, -79, 16, -37, 20, -5, -10, 29, -10, 7, -8, -14, -71, -42, 34, 6, -4, -32, 4, -31, 6, -12, -77, 25, 12, -31, 38, 17, 86, -58, 35, 78, -50, -31, -40, -23, -16, 29, 6, 10, 14, -19, 63, 6, 51, -42, 40, 
  6, -36, -33, 27, -24, -12, 21, 12, -18, -81, 40, 44, -73, 10, -60, 21, 70, 20, 67, -29, 8, 25, -3, 53, 54, -5, 60, 84, 36, 59, 43, -18, 107, -3, -53, 5, -15, 57, -38, 2, -19, -58, -2, 34, 8, 31, -39, 19, 39, -3, -53, -61, 25, 13, 53, -23, -67, -59, -54, 1, -58, 24, 47, -39, 62, 3, -52, -81, -63, -44, -10, -83, -28, -69, 24, 26, 15, 29, 48, 76, 72, 9, -15, 29, -32, -66, 40, -38, 22, 11, -35, 6, -16, 35, 62, -34, 63, -47, 30, 28, 4, -65, 18, -68, -40, -31, -7, 56, 1, 51, -9, 78, -18, 21, 18, 45, 0, -1, 62, 33, -45, 45, 14, -44, 23, -49, 2, 66, 20, -51, -8, -3, 27, 8, -33, -6, 61, -14, -8, 41, 27, -38, 26, -14, 12, 2, -4, 11, 60, -53, -35, -17, -17, -49, 6, -11, 21, 21, -3, 24, 79, 40, 35, 64, -23, 39, -44, 74, 24, -27, -56, 17, -3, 26, 23, -37, -5, -46, 23, -71, -36, 1, 26, 3, 14, 27, 37, 31, -16, -44, 22, 59, -56, -6, 18, 11, -36, -64, 22, 47, 21, -33, -2, -50, -11, -42, -40, -32, -77, 0, -21, -30, 50, -4, -66, -38, 23, 24, 46, -27, 30, 32, -31, -56, -50, -4, 43, 19, -28, 35, 7, 78, 41, 47, 33, -1, 44, -25, -14, -3, -12, 37, 9, -23, 39, 53, -60, -12, 0, 39, -6, -30, 9, 40, -22, 43, -37, 64, 50, -6, 55, 33, -50, 55, -12, 0, -85, -12, 43, -38, -29, 12, -62, -18, 90, 55, -18, 68, -33, -19, -9, -24, 28, 0, 16, 50, -26, 14, -61, -55, 29, 38, 66, 82, 10, 14, 44, 21, 26, 18, 42, -74, -67, 39, -12, 48, 17, -34, 44, 33, -22, 20, 3, -29, -56, 20, 10, -58, -49, 6, 20, 46, 18, 16, 7, 58, 56, -52, -35, -54, 30, 0, -20, -27, 7, 35, 9, 13, 32, 32, -27, 58, -42, -53, -94, 15, -97, -50, -13, -21, 31, -6, 30, 12, 44, 36, 37, -8, 17, -29, 57, -24, -56, -8, -54, 39, 13, 33, 6, 19, -20, 0, 56, 15, -61, -29, 11, 38, -44, 69, 48, 62, -48, -38, 51, 50, -51, 54, -6, -50, 41, 54, -18, -34, -49, 63, 24, 25, -17, -18, 
  -5, -35, -50, 22, -35, 7, 1, 17, 20, 1, -59, -58, 19, -55, 3, -55, -51, -50, -10, -46, -5, -9, -18, 5, 23, 6, -19, 7, -6, 43, -14, -24, -55, 27, 65, 23, -6, 70, -38, -67, 4, 22, -9, -9, 3, -14, 22, 32, 20, -13, -35, -63, -59, 29, 40, -65, 17, -41, 3, 13, 23, -57, 34, -55, 13, 35, 11, 43, -53, 53, 55, 16, 4, -49, -4, 28, -5, 30, 29, 23, -49, -62, -2, 0, 15, -58, 2, 13, -36, -11, -48, -68, -26, -17, -51, -54, -19, 9, 19, -25, -60, -58, -38, -50, -16, 27, -20, -40, -67, 35, 32, -27, -8, -35, -43, 34, 10, -7, -23, 14, 42, -24, -39, 40, -34, -9, 4, 32, 0, -18, 56, -15, -30, -28, 11, -27, 48, 7, -41, -3, -5, 6, -27, 29, 10, 31, -45, -58, -25, 7, 11, -28, -27, -60, -60, 30, -8, -4, 23, 40, 49, -12, 39, 24, 53, 20, 1, 19, 33, -31, -21, -28, 32, 6, -64, -28, 25, -48, -64, 43, 32, -41, -51, -10, -52, -17, -16, -18, -22, -44, 28, 33, -43, 3, -32, 4, -31, -4, 14, -20, 22, 1, -12, -34, -5, -30, -5, -76, 34, -44, -18, -47, -31, 51, -46, -4, -14, 33, -44, -55, -7, -20, -1, 9, 16, 18, 20, 26, 12, 8, 38, -68, 2, -60, -55, 54, -56, -35, 9, 22, 29, 9, 1, -43, 39, -19, -5, 10, -52, 7, -19, 0, 14, 25, 45, 58, 6, -41, -17, 24, 18, -39, -35, 49, 26, -21, 14, 48, -61, 41, 27, -51, -1, -23, -67, -22, 35, 1, -14, 18, 35, -47, -47, -1, -46, -56, 16, -10, 28, 23, 37, -11, -13, -33, 32, -19, 10, -61, 5, -25, -52, -54, 14, -38, -41, -54, -20, 24, 37, -30, -21, -50, -54, -11, -35, -19, 34, -4, 39, 13, -44, -9, 9, 10, -55, 22, -35, -46, -34, -14, -13, 27, -67, -51, 3, 62, 36, -32, -20, -11, 20, -30, 16, -15, 24, 23, -16, 14, -1, -29, 37, -36, 6, 5, -17, -25, -18, 32, 23, 6, -8, -35, 26, -10, 62, -26, -32, 35, 8, 3, -5, 9, -35, -45, -28, 1, 34, -29, -24, -35, 36, 6, -6, -14, -25, -25, -30, -45, 12, -40, -60, -27, -28, -41, -43, -37, -6, 8, -30, -7, 
  -1, -58, -35, -11, 2, -63, 27, 18, 33, 34, -58, -69, 31, -45, -14, 34, -19, -44, -36, -6, -67, -21, -31, -22, 40, -29, -47, -69, -23, -10, -53, -9, 33, 39, 46, -67, -31, 16, 1, -25, 24, -25, -15, 36, -27, -30, -19, -51, -3, 3, -37, -40, -50, -31, -58, -30, -4, -58, -16, -1, -1, 27, -25, 9, -68, 10, 40, -22, 6, -40, -18, 2, 19, 5, 34, -8, 12, 1, 20, -18, -65, -17, 6, -45, -43, -9, 3, 32, -32, 21, -61, 11, -46, 40, 30, -2, 30, -54, 17, -51, -4, 33, 33, 17, 27, 13, -18, -52, -67, 7, 34, 27, 27, -39, 10, -59, -45, -59, -56, -29, -68, -61, 27, -36, -39, -28, 0, -42, 5, 52, 2, -67, -48, 12, -4, -32, -52, -11, -19, 26, -26, 19, -38, 38, -5, -64, -45, -47, 19, 7, -1, -44, -29, -9, -23, 14, -38, -7, 33, 37, -54, -26, 1, -45, 12, -14, 31, 20, -7, 23, 31, 17, 35, -42, 9, 21, 19, -11, 36, -64, 38, -29, -40, -3, 36, 13, -18, -41, 0, 45, 5, -7, 9, 11, 52, 16, 22, -55, -27, 5, -55, -48, -54, -33, -63, -47, 13, -10, 23, -35, 34, -51, -41, -19, 16, -34, -65, -1, -35, -8, -8, -32, -42, -7, 36, -28, 9, 20, 37, 16, -46, -47, -51, -1, -42, -43, 30, 40, -36, -41, -68, 15, -38, -24, 38, 5, -45, 18, -22, -31, -17, 27, 19, -27, 30, 2, -26, -23, -38, -27, -68, -36, -65, -13, 28, -22, 0, 31, -29, -35, -47, -63, -51, -9, 33, -66, 54, -1, -49, -41, 16, -65, 38, -16, -22, -28, 30, 38, -36, -28, -13, -32, -28, -38, -22, -43, -39, -38, -34, 20, -65, -40, 7, 21, -3, -41, -41, -16, -5, -68, 21, -4, -24, 21, 21, -9, -45, -10, 0, -25, -35, 22, -44, 2, -45, 54, 37, -65, -62, 20, -52, 8, 17, 51, -55, 30, 9, 38, 30, -15, -42, 39, 5, 19, -32, -30, -18, -40, -49, 13, -37, -33, -68, -66, 42, -16, 20, -40, -16, 18, -48, -14, 16, -35, -60, -40, -43, -16, -22, -11, 50, -55, -62, -45, -44, 11, 16, 33, -27, -56, -43, 43, -49, -24, -40, 5, 5, -6, -23, 5, 3, -30, -56, 14, 24, -22, -1, 50, 38, 41, 
  20, -53, 8, -55, -50, -34, 15, -29, -18, -19, -28, 37, -18, -6, 54, 36, 33, 38, 55, -5, -8, -54, 37, -39, 7, -4, -51, -30, -50, -36, 10, -53, -49, -26, -19, -42, 52, 51, -54, -33, -27, 49, -2, 6, -47, 28, -46, 53, -46, 47, 14, 6, -47, -32, 12, 12, 21, -45, -52, 16, 31, 35, 26, -14, -32, 38, 40, -14, -23, 40, 33, -3, -12, 0, -9, 4, -23, 23, -43, -11, -45, 5, -44, 34, -21, 28, -26, -39, -13, 13, 53, 7, -47, 2, -20, -31, -27, 38, -40, 5, -10, -39, 25, -40, -31, -42, 40, 3, -2, 6, 18, 32, 54, -31, 12, -44, 29, 28, -37, -23, -42, 53, 39, 33, 47, -53, -20, -11, 27, 3, 41, -37, 12, 44, 6, 0, 49, -47, -1, -44, -30, -17, 31, -36, -42, 33, 25, 46, 54, 54, -26, -21, -31, -9, -47, 6, 36, 20, 20, 34, -33, 24, 13, -35, -33, 18, 42, 31, -26, -21, -46, 3, 48, 30, 50, -16, 49, -31, 31, -53, -39, -14, -39, 51, -43, 7, -14, 1, 48, -52, 11, -40, -32, -51, -41, -46, -7, 33, -37, 29, 55, -16, -15, 49, -7, -48, 54, -43, -39, 4, -41, -55, 41, -39, 33, -36, -1, -42, -27, 38, 18, 51, -44, 7, 18, 27, -25, -27, -8, -39, -33, 44, 53, 38, 18, -49, 3, 27, 13, -35, -15, -4, -46, -44, -27, -24, -45, -2, 42, -15, -39, 41, -19, -53, 26, -3, -31, -4, -11, 34, 13, 9, -17, -46, -13, 20, 52, 5, 6, -4, -18, -24, -38, 53, 2, 45, -19, -8, -5, -37, 5, -44, -24, 11, 42, -8, -19, 0, -50, -23, -24, -10, 2, -52, 47, 14, 3, -2, -5, 29, -14, 34, -13, 15, -44, -28, -46, -42, -16, -46, -33, 25, 39, -32, 22, -39, 20, 40, -24, -31, -30, -21, 41, 35, 29, 18, 21, 12, -51, 26, 3, 52, 15, 5, -28, -39, -32, 12, 7, 14, 14, -53, -40, -32, -36, 31, -43, 41, -32, -52, -23, -15, -9, -4, 15, -28, -37, 0, -31, -24, -35, -41, 50, 1, -20, -52, -44, 38, -26, 8, 26, -38, 8, 43, -22, -44, -19, -38, -53, -52, 19, 10, -38, 37, -29, 32, 1, -21, 15, -36, -55, -26, -32, 38, 27, -8, 43, -47, -33, -12, 
  -10, 8, 39, -41, -54, -63, 3, 16, -1, 23, -55, 21, -39, 13, -9, 28, -36, -56, -53, -62, -39, -21, -53, -30, -46, -35, -27, 34, -17, -69, -3, -65, -20, 17, 45, 34, 17, -14, -41, -60, -33, -24, -3, -43, -12, -47, 35, -34, -29, -75, -20, 37, 32, -4, -54, 30, -18, -58, 12, -37, 1, -68, -28, -56, -5, -12, -26, 9, -75, -35, -46, -69, -47, -44, -28, -67, -45, -53, 27, -73, 9, 38, 13, 47, 28, 15, 5, 26, -59, -48, -71, 17, -47, -21, -56, 25, -58, 8, -61, -26, -3, 2, -44, 17, 4, 27, -50, -65, 32, 4, -31, 10, -12, -10, -73, -5, -14, -70, -35, 28, -48, 17, -35, -44, -23, -40, -72, 38, -11, 37, -65, 7, -18, 3, 24, -57, -38, -29, 17, 31, 6, 29, -26, -34, -24, -69, -42, 1, -52, 26, -58, -39, -48, -40, -23, -40, -6, 2, 27, -3, 24, -21, -61, 27, 34, 24, -60, -15, -28, 33, 26, -67, 19, 27, 18, 2, -55, -39, -43, -17, -73, 53, -60, 15, -48, 22, 28, -69, -20, -27, -62, 14, -37, -52, -14, -19, 19, -23, 2, 11, 33, -31, -45, 37, 4, 9, -21, 37, -17, -72, -12, -71, -26, 10, -42, -55, -50, -29, 13, 16, -30, 36, -24, 5, 36, 35, -53, 29, 20, 32, -43, -7, -28, 36, 18, -17, -10, -18, -17, -14, -34, -70, -18, -31, -65, -40, -22, 4, -32, 19, -16, -32, -31, 9, -33, -47, -60, -34, 30, -54, 29, -56, -50, -5, 23, 3, -32, 1, 1, 53, -47, 10, 24, -52, -17, 24, -4, -22, -12, 7, -38, 23, 29, 3, 18, -33, -65, 34, 17, -34, -30, -41, 3, 22, -38, 2, -35, 19, -61, 23, -19, 7, 10, 10, -23, -46, -45, -11, -16, 6, 4, 11, -46, -41, -43, -11, -57, 2, 45, 4, -12, -20, -40, 8, -68, 23, 34, -60, -20, -40, -4, -4, -41, 31, -69, 20, -45, 2, -2, -39, -11, 12, 25, -40, 2, -12, 39, -50, -40, -22, 16, 20, 8, -2, 4, -48, -67, -62, 21, -68, 51, 16, -2, 26, -11, 17, -25, 7, 24, 20, 18, -14, 23, -4, -32, 7, 4, 27, -37, -11, -5, 27, 6, -57, 50, 19, -49, -17, -8, -4, -20, 4, -9, -74, -29, -28, -26, -9, 20, -21, 
  -23, 84, -26, 63, -1, -34, -10, 22, 64, 21, 2, -11, -20, 7, -43, -11, -42, 41, 75, 42, 61, 80, 65, 21, 83, 81, 42, -38, 45, 34, 15, 57, -10, 59, 1, 48, -24, 9, 26, 83, -20, 95, 9, 5, 23, 64, -17, -41, 31, 37, -16, 68, -25, 9, 27, 12, 15, 53, -39, 18, 27, -30, 5, 41, 19, -56, -19, 42, 1, -11, 4, 16, -28, 34, 34, -56, -37, -32, -49, -3, 32, 11, 9, 45, -51, -3, 29, 8, -3, 5, 22, -40, 42, -74, 44, -31, -70, -21, -44, 19, -55, -16, 19, -35, 60, -37, -26, -42, -30, -29, 25, -19, -20, -25, -41, 0, 13, -48, 14, 70, -34, -33, -36, -4, 45, -54, 1, 10, -45, -36, 5, -20, -37, 40, -27, -74, 3, -3, -11, -15, 40, -18, 27, -31, 53, -9, -45, 18, -51, -20, 44, 24, 2, 25, 61, 7, 44, 5, 13, -17, 9, 4, 37, -38, 8, -2, 46, 6, 22, 18, 60, -9, 40, 15, -18, -18, 48, 9, 0, 11, -29, 59, 0, -2, -56, -3, -2, 32, 40, -7, 59, -32, 71, -5, -18, -13, -25, -42, -40, -9, -19, 5, -48, 47, -56, 7, 37, -25, 6, -51, 39, -28, 11, -46, 29, 51, 34, 9, 14, 41, 6, 38, -19, 33, 16, 21, 47, -57, -9, 31, -15, 41, -11, -54, 4, 1, 13, -54, -50, -30, 15, -81, -35, -43, -36, 10, 31, -16, 15, -8, 9, -19, 53, 9, 15, -23, -42, 7, -106, 47, -31, -55, -52, 18, 49, 43, 51, 42, -5, 55, 38, -7, 6, 10, -16, 2, -37, -43, -20, 77, -35, -41, 58, 54, 52, -26, -1, -16, 25, -3, -11, 10, -27, -42, 7, 30, -38, -8, -46, -47, -50, 11, -57, 2, -15, -59, 40, 60, -21, 34, 50, 19, 47, 33, 19, -42, -25, 51, 39, -10, -46, 8, -10, 51, -40, 59, 4, -20, -59, 32, 46, -49, -25, 5, 16, 71, -22, -27, 55, 19, 11, 43, -10, -25, -35, 58, -29, -75, 66, 4, 14, 10, -78, -42, 25, -33, 24, -70, 8, -41, 36, 45, -30, -60, -2, -42, 57, 28, -44, 51, -74, 33, 48, 1, 48, -46, 60, 19, 49, -19, 40, 4, 42, 25, -6, 63, -36, 3, 52, 62, 22, -48, 40, 36, -12, -62, -8, 26, 17, -5, 
  2, 43, 21, 8, -3, 26, -26, -2, 17, 29, 49, 19, 43, -49, 9, 11, -50, 19, 40, 28, -32, 15, -3, 3, -39, -1, 14, 17, -11, -17, -65, -39, 5, -51, 32, -25, 9, -5, -37, -49, 7, -53, -55, 30, -56, 1, 18, 46, -38, -48, 0, 16, -56, -52, 30, -54, -9, 2, 22, -50, -61, -53, 59, -5, 5, -65, -20, -57, 32, -57, 13, -53, -42, 17, 15, -36, -2, -14, 16, -48, -24, 15, -7, 0, 1, 5, 28, 33, -14, -18, -14, -9, 18, -39, -33, 35, -13, 13, 1, -46, 3, -37, 25, 5, -5, -44, -53, -33, 47, 39, -4, -9, 14, -34, -36, 33, 42, -37, -35, -28, 32, -16, -71, -52, 12, 47, 20, -42, 10, 36, 21, -49, 37, -63, -10, -50, -32, -47, -18, -56, -69, 1, -61, 7, -51, 27, 14, -46, -18, -52, -45, 56, -7, 45, -32, -54, 30, 29, -51, 31, -62, -32, -45, 26, -19, 12, -27, -56, 24, 32, -68, -29, 58, 36, -9, -20, 34, -16, 53, 24, -71, -32, -18, -53, -4, -28, 44, 36, -38, 10, -51, -42, 36, 2, -70, -26, -9, 45, -40, 9, -67, -69, -30, -48, 10, -52, -31, 40, -57, 10, -20, -22, -39, -49, -59, -51, -47, -22, -15, -34, -57, -24, -34, -52, 39, -34, -57, 35, 2, -8, -6, -5, -54, -47, -66, 6, -49, 39, -29, -48, 35, 23, 27, -30, -57, 20, -49, 7, 12, -30, -46, -56, -8, -39, -3, 30, 18, -63, -63, -26, 34, -15, -38, 18, -51, -28, -41, 33, -60, 6, -24, 39, 5, -58, 25, 1, 23, -21, 2, -43, 38, -59, -64, -48, -43, -68, -42, 24, -71, 28, -5, 42, -3, -16, 28, 26, -26, -44, -54, -1, 13, -21, 15, -58, -32, 17, -46, 27, -6, 20, 2, 34, 12, -43, -52, 18, -1, -55, -38, -37, 34, 32, 41, 7, 19, 15, 11, 28, -69, -44, -46, 39, -45, 1, 19, -61, -6, 12, 52, -40, 15, 22, -29, 36, 4, -44, -28, -8, -64, -42, -6, 37, -47, 48, -15, -54, 4, 23, -15, -25, -31, 22, 5, 37, -28, 10, -45, 29, 41, 19, 8, 25, 18, 14, -5, -19, 24, 2, -7, -28, -64, 20, -25, -59, 9, 3, 26, -19, -39, -39, -9, 20, -56, -38, 11, 31, -49, 24, 36, -45, 
  -14, -44, 13, 10, 32, 1, 54, 67, -20, 79, -31, -18, 52, -28, 23, -7, -57, 4, 77, 38, -16, 51, 72, 2, -8, -19, -5, -64, 0, -71, 9, -31, -6, 19, 10, 44, -31, 79, 55, -10, -60, 31, -24, -36, 66, 20, -14, -20, 14, 51, 54, -28, -50, 10, -14, -8, 5, 52, 11, -12, -7, 15, 41, -28, -25, -3, -18, 23, -48, -10, 26, -18, 22, -20, -24, 6, 43, 8, 22, 6, 17, -11, 58, -66, -44, 75, -29, 50, -28, 6, -11, 6, 37, 30, -24, 12, -45, 14, -25, 39, 18, -10, 32, -48, 1, -32, 15, 20, -12, -28, -6, -48, -81, -41, 13, -2, 9, -43, 21, 20, -38, 21, -26, 19, 8, 21, -10, 55, 25, 3, -24, 22, -1, 9, 25, -29, 2, -49, 24, -49, 60, -7, 0, 56, 40, -31, 3, 59, 41, -15, 17, 40, -32, 49, 22, -42, 13, 28, 9, -28, -64, -41, -64, 42, 2, 12, 19, 17, -41, 20, -55, 48, -35, -32, -66, -32, 61, -58, 30, 44, -46, -69, 11, -41, -6, -46, 11, -1, 10, 4, -48, 34, 47, -45, 39, 25, -30, -33, -24, -7, -9, -47, -18, 17, 5, -1, -75, -33, 51, 2, -42, 6, 5, 48, -42, 56, 66, -42, 55, 50, 21, -36, 62, 43, 50, 98, 31, 37, 90, -39, 7, -29, -58, 51, -42, 5, -29, -32, 0, 26, 40, 67, 28, 54, -29, 19, 68, -48, 21, 10, 77, -26, -10, 5, -5, -58, 67, 51, 30, 36, -50, -60, -16, 36, 17, 4, 11, -9, 25, -49, -22, 58, 83, -1, 28, -8, 51, 30, 16, 4, 13, 3, 54, 57, 55, -15, 92, 11, -59, -15, 14, 6, -56, -59, 35, 37, -29, 43, -1, -5, -49, -46, -30, -50, 40, -54, 65, 26, -67, -34, -19, 49, -2, -78, -38, -30, -60, 73, -10, 0, -11, 28, -18, 10, -25, 76, -20, -29, -45, 40, -28, -18, 76, 67, -26, 66, -41, 10, 1, 43, -1, -10, 22, 40, 11, 25, -23, -2, -25, -5, -64, 40, 4, -7, -16, 26, 26, 40, -61, 78, 61, 55, -17, -5, 89, 14, 32, 65, -97, -3, 29, 9, -46, 80, 100, 45, -8, 42, -15, -26, 15, 35, 40, 5, -97, 30, 25, 15, 13, 11, -52, 7, -34, 72, 38, -41, -28, -7, -16, -38, 
  21, -29, 44, -26, -16, -98, -32, -10, 44, -45, -22, 41, 31, -21, -59, -84, -6, -47, -81, -58, -40, 22, -25, -15, 65, -100, -70, -17, -65, 14, -91, -5, -25, -37, -6, 10, -63, 13, -35, -57, 27, 20, 50, 47, -34, -19, -36, -9, -20, -41, -10, -47, 17, 7, -92, 22, 59, -44, 18, 18, 70, 16, -4, -32, 74, 16, -84, -39, 81, 0, -59, -34, 39, -67, -15, 48, 28, -61, -48, -55, -24, -2, -17, 38, 82, 11, -15, 2, -4, 22, 27, 52, -39, 41, 35, -27, 55, 18, 53, -44, 46, 31, -11, 41, -42, 57, -3, 53, -2, 19, 75, 11, 59, 38, -31, 11, 51, -26, -16, -49, -32, -18, 20, -39, 18, 70, 5, 45, 45, 72, 8, 11, -10, -26, -6, -22, -58, 27, -22, -48, 42, -14, -3, 41, -47, -23, 11, 7, 2, -33, 45, -3, -6, 23, 36, -21, -46, -25, 61, -6, 23, -25, 73, 8, 18, 13, 75, -4, -2, -42, -16, 16, -7, 1, 3, 35, -22, 26, -8, 33, 54, 11, 2, 8, -34, -10, -12, 26, 67, -20, 48, 34, -21, 66, -19, 18, -23, 54, -11, 26, -42, -30, 11, 28, -54, -18, 28, 21, -23, 7, 122, -5, -75, 84, 50, 39, -11, 2, -6, -54, -22, -1, 1, 66, 32, -87, -11, 9, -5, -12, -44, 27, -39, 1, 27, -49, -43, -11, 20, 76, -28, -68, 56, 10, 25, -8, -4, 62, -78, -47, -80, -64, 45, 13, -25, 20, 3, -29, -21, 23, -35, 30, -16, -55, 7, -12, -58, -12, -20, -57, -58, -16, -30, 38, -7, 22, -15, -20, 26, 45, -52, 0, -45, -7, 2, 37, -28, -16, 1, -47, 69, -33, -18, -14, 8, 74, 40, 1, 54, 27, 97, 46, -15, -39, 22, -37, -51, -57, 8, -25, 19, -12, -3, 32, 27, -16, 15, -27, 10, 54, -23, 50, -16, -8, 52, -17, -3, 43, 54, 17, 20, 62, 47, 16, -53, -56, 16, 0, -15, 27, 46, 33, -49, 74, -19, -24, -3, -38, 44, -37, -7, -59, 36, 85, -41, 27, -25, -2, -54, -50, -34, 3, -7, 35, -5, -7, -66, 10, 31, 46, 24, 25, -35, -51, 24, -33, 16, -81, -2, 43, -7, -43, 29, -17, 44, 11, -14, -9, 54, 64, 37, 50, -24, 26, 20, 65, -30, 37, 56, 57, 
  -52, 37, -52, 13, -25, -60, -41, 2, 29, -18, -42, -57, -36, -22, -17, -14, -33, -38, -3, 27, -38, -20, -55, 47, 32, 42, 32, -28, 35, -43, 11, 15, -31, 50, 29, 42, 33, 30, -15, 28, 3, -6, 31, 11, 18, -54, 8, -63, 51, -42, -13, 5, -64, -24, -33, -25, -55, -45, 37, -50, -43, -12, -67, -51, -57, -41, 40, -38, -6, -44, -24, 47, -46, -43, -54, -37, 34, 29, -11, 18, -10, -24, 26, 10, -28, 27, -22, -56, 37, -30, -49, 34, -60, 51, -59, -20, 20, 40, -53, -35, -31, -27, -54, 35, 17, -23, 10, -31, -54, -6, -20, -44, 9, 33, -12, 0, -11, 21, -37, 38, -18, 32, -15, -20, -33, -24, 16, -4, -5, -59, -53, -48, 0, 4, -40, -59, 11, -32, -5, 0, -10, 36, 16, 42, 8, -55, -61, 27, 18, 30, -52, -21, -67, 25, 18, -19, -11, -50, -49, 26, -11, 35, -17, -53, -18, 8, -35, 39, -54, -6, -41, -5, -49, 24, 6, -32, -12, -53, -55, -28, -50, -48, -20, -48, -25, 40, -51, -45, -24, 18, -34, 3, -42, -2, 17, 40, 29, -33, -45, 16, -57, -18, 36, -53, 8, 51, -28, -5, 17, -41, 14, 6, 7, 11, -21, 2, -31, 41, 17, -17, -34, -37, 1, -20, 39, -46, -12, -63, -11, -14, -34, 4, 42, 1, 28, -46, 1, -49, -20, -21, -39, 49, -16, 36, -62, -41, -68, 24, -51, -59, 15, -64, -40, 14, -6, -34, 3, 17, -35, 37, -62, 15, -19, -43, -4, 30, -39, -8, -42, 22, 44, -12, -11, -41, 0, -31, 43, -35, -19, 12, -35, -59, 9, -12, 7, -45, 27, -54, 12, 34, 10, -5, 35, 36, 28, -6, 20, 14, 26, -32, -25, 29, -49, 34, -1, -32, -46, -55, 4, -5, 19, 16, -33, -59, -24, -2, 1, 44, -50, -45, -1, -36, -20, -29, -21, -10, 40, -31, 41, -4, -59, -49, -55, 41, -15, -34, 25, -26, -30, -57, -49, 29, -48, 15, -50, 37, -63, -10, -19, 35, -63, -12, -44, -25, 23, -49, 17, -32, -10, -12, -59, 8, 4, -51, -48, -1, -8, -17, -40, 26, -6, 16, -36, 29, -35, -31, 1, -1, -5, -36, 15, -43, -37, 38, 19, -63, 35, 16, -66, -58, -41, 26, 12, -16, -8, 18, 29, 15, -16, -38, 
  33, -7, 3, -21, -27, 48, -10, -34, -53, 48, -58, 19, 29, 80, 49, 63, 44, -5, 63, 68, 20, -8, 15, -31, 9, -28, 31, -52, 22, -51, 87, 60, -20, 0, 60, -28, 51, -3, 35, -21, -57, -33, 28, 3, 46, -2, 24, 66, -11, -33, 28, -63, 43, -15, -2, -71, -86, -33, 13, 21, 27, 3, 39, 30, 24, -89, 88, 19, -2, -17, 35, 19, -37, 7, -27, -25, -54, 3, 1, 53, 55, 34, 57, -42, -23, -45, -58, -19, 10, -45, 48, -60, -4, 9, 72, 35, 1, 8, -32, 32, -47, -53, 14, 29, 1, 42, 31, -18, 32, -64, -5, 5, -82, -33, 25, 15, 16, 30, -60, -31, -8, -70, 31, -23, 20, 49, -30, 10, -80, -37, 37, 8, -34, -1, -59, 19, 1, -38, -46, 26, 25, -76, 18, -37, -5, -42, -17, 68, -16, 11, -63, 39, 12, 0, -92, -43, -19, 4, -88, -37, 1, -3, -93, -15, -26, -58, -55, 31, 46, -4, -34, 0, 7, -39, -35, -40, 11, -33, -50, 20, -17, -54, -46, 16, 52, -9, 15, 9, 11, 1, 53, -3, 64, -2, 18, 7, 76, -32, -40, -25, 73, -19, 34, 77, -2, 51, -26, -19, 62, 63, -31, -28, 100, -19, -64, 33, 76, 36, 41, 21, 13, -1, 29, -44, -1, 34, 29, -18, 107, 40, 9, 40, 37, -8, 24, 107, 45, 31, -30, 38, 36, 86, -8, 5, 76, -47, 0, 23, -9, 92, 31, 66, -49, -6, 30, -18, 48, 103, 17, 27, 12, 46, 57, 61, -13, 68, 68, -18, 1, -71, 52, 29, 6, 54, 103, 66, 50, 66, -3, 27, 10, 49, 39, -31, 55, -11, -13, -36, 10, 4, 17, 66, 77, -31, 75, -13, -49, 68, -32, -25, -13, -74, 48, 18, -40, 21, 52, -15, 1, -16, 15, -32, 42, 49, 66, 49, -17, 36, 46, -3, 43, 9, 8, 25, -27, 83, 52, -11, -32, 14, -74, 36, -22, -22, 41, 39, -52, 54, 53, 51, -7, -44, -44, -40, 13, -35, -20, 0, -17, -25, -36, -36, 8, -9, 72, 24, 33, 56, 58, 63, 6, -47, 18, -9, -23, 0, -22, 26, -41, -30, -46, 25, -3, -53, 3, 11, -48, 2, 5, -35, -3, -43, 3, 48, -44, -14, 33, -62, -60, 26, -13, 15, -57, 10, 23, 33, -13, 26, -45, 19, 
  21, 60, -57, 22, 58, 53, -24, 72, 59, 12, 30, 36, 14, 31, -61, 14, -31, 37, -55, 76, 89, 27, -9, 14, 69, 8, 17, -38, 22, 34, -3, 41, -24, -52, -55, 65, 7, 75, 107, 46, 67, 45, -20, -48, -44, -3, 97, 20, 4, -1, -1, 63, -35, -19, 81, 75, 15, 8, 12, -17, -9, 11, 20, -64, -11, 39, 41, -39, 3, -43, 85, 22, -84, 9, -12, -1, -8, -27, 70, -23, 15, -56, 2, 43, -16, -39, 1, -28, -8, 34, 32, -12, -7, -20, 26, -57, 10, 78, -71, 109, 1, -28, -74, -2, 105, 8, 23, 0, 18, -46, -61, 13, 23, 30, -41, 0, 20, -16, -4, 35, 101, 24, -13, 51, -32, -46, -53, -46, 19, -39, -26, -3, -12, 20, -33, 0, -2, 58, 5, -5, -4, -65, -84, 32, -39, 26, -34, -81, 6, -26, -39, -29, 53, -22, 3, -41, -35, 65, 15, -3, 22, 25, -11, -23, -27, -43, 16, -11, -43, 39, 6, -8, -1, 34, 26, 29, 77, -1, 44, 47, 16, 0, -10, 47, 43, -6, -1, 5, -45, -62, -4, 5, 30, 17, -16, 2, 42, 25, 70, -8, -33, -50, -39, 12, 40, 65, -40, 18, -48, -39, -44, 6, -31, -4, -12, 23, 7, -56, 23, -18, -44, -64, -38, -7, -36, 11, -19, -22, -15, 13, 26, -33, -41, -18, -31, -20, 8, 17, -44, 36, -44, -93, 26, 14, 11, -43, -25, -45, 17, -64, 34, -46, 42, 7, 18, -6, 27, 57, -92, -21, 8, -58, -56, -46, -40, -46, 2, 27, 24, 23, -1, -18, 46, 26, 39, -26, 22, 0, 19, 108, 3, 9, -14, 63, -25, -5, 30, -19, 46, 7, 46, -8, 41, 23, -30, -44, 26, 29, 0, 1, 1, -17, 25, 42, -8, 45, -37, 18, 83, 25, 47, 8, -16, 89, 51, -35, 12, 32, 17, 31, -33, 4, -34, 8, 23, 20, 82, 6, -38, 21, 12, -15, -23, 60, 60, 25, 51, -73, 59, -16, 26, -14, 35, -17, -36, 4, 7, -20, 51, 49, 21, -34, 33, 6, 25, -46, 39, -38, 58, -4, 32, 44, -32, 48, -31, -28, 11, -26, 21, 40, 13, 33, -16, -23, 30, -20, 6, -40, 34, 54, 36, -54, 35, -61, 17, 62, 6, -12, 39, 51, -5, -17, -41, -77, -41, 68, -55, 29, -55, -8, 
  -21, -11, -15, -65, -10, 14, -50, -65, 19, -45, -9, 9, -9, -51, -62, -28, -4, -68, -34, -61, 13, -49, 17, -46, -16, 48, 9, -27, 37, 30, -12, -43, -34, 14, -18, 3, 12, 28, 0, -42, 38, -3, 26, -44, 15, 29, 3, -36, 51, -47, 41, 3, 26, -13, -22, -17, -38, 27, 8, -8, -41, -25, 32, -30, -55, -29, -6, -43, 16, 1, 6, 16, 51, -60, -12, -56, -29, 42, -5, 20, -65, -7, -3, -2, 50, -14, 0, 30, -50, -17, 27, -64, -54, -19, -53, 3, 37, 11, -51, -28, 14, 32, -29, 34, 0, -10, -62, -43, 24, 1, -9, -3, 37, 28, -34, 0, -14, -11, -67, -12, -34, -43, 17, 38, -61, -8, 7, 4, 18, -16, -3, 34, -7, -47, -11, -55, -13, 8, 32, -64, -4, -36, -51, -32, 38, 43, -58, -27, 24, -14, 40, 3, -39, -5, -31, -52, -24, -61, -3, -44, -6, -69, -41, -17, -9, -10, -49, -59, -32, 17, -53, -20, -58, 31, -54, -21, 33, -65, 31, 23, -24, -65, 6, -67, -2, -51, -12, -23, -1, -47, -42, -59, -7, -50, -43, -37, -8, 10, -11, -21, -20, 1, -9, -9, 40, 26, -1, -12, -60, -29, 13, 31, -28, -61, -13, -27, -17, -22, -67, 37, 1, 52, 31, 37, -17, -26, 34, -37, -59, 33, -67, -17, -47, -47, 19, -10, -69, -27, -47, -60, 17, 51, -50, -22, -56, 36, 4, 23, -23, -45, -3, -1, -7, 37, 4, -42, -36, -20, 34, -40, -1, -53, -54, 35, 1, -52, 0, -10, 8, -14, -56, -41, -48, -11, -9, -30, -39, -65, -23, -63, -68, -56, 6, -3, 31, -23, -61, 26, 32, -47, -16, -45, -61, 24, -68, -33, -30, -46, -64, 11, 15, -44, 26, -12, 14, -26, 30, -28, -14, -14, -57, -32, -31, -68, 28, 24, -13, 5, 14, -39, 48, -46, 39, -15, -25, 21, -1, -48, -35, -11, -66, -14, -14, -45, -54, -20, 32, -19, -21, 30, -56, -59, -26, 1, -58, 34, -66, 12, -35, 30, 13, -69, -8, -31, 19, -68, -41, -16, 15, 38, 1, -32, -2, 26, 36, -10, -11, -2, -33, -62, 10, 6, -25, -53, -20, -63, -20, -12, -55, -12, 7, -40, -61, -18, -39, -62, 0, -58, -34, 11, 14, -5, -28, -30, -27, -2, 34, 7, -36, 13, 
  -8, -13, 39, -10, -30, -22, -34, 37, 3, 41, 37, -6, -58, 16, 32, 8, 40, -16, -40, -68, -61, -5, 10, 55, -37, 32, -18, -60, 10, -49, -17, -44, 40, -32, -55, 19, -7, -8, -53, 11, -12, -17, 17, -53, -62, 31, -23, -40, -1, -1, -60, -21, -20, 15, -48, 29, -22, -7, 2, -47, -61, 18, -65, -47, -24, 33, 10, -30, 33, 11, 37, 4, 11, -37, 37, -32, -24, 0, -64, -18, -39, 36, 46, 29, 12, -27, -16, -22, -7, 34, 40, -30, 13, -53, 27, -44, 2, -53, -17, -64, -22, 9, -66, -31, -4, -38, -35, -44, -3, 34, 22, -64, 22, 31, -5, -28, -18, -39, 32, -22, -61, -26, -49, 6, 17, -9, -52, -64, -51, 33, -41, 8, -9, 19, -34, 27, -65, -36, -15, -26, -29, -16, 14, 15, -59, -28, 11, 40, -44, -10, -26, 4, 1, 21, -24, 16, 24, 12, -40, 23, -29, -23, -1, 19, 18, 41, -22, -17, -55, -64, -54, -11, -60, -44, -46, 11, -28, -68, 20, -24, -4, 37, 1, -18, 39, -55, -42, -39, -15, 16, 32, -52, 22, -3, -2, 17, -29, -40, -13, -7, -27, -64, 17, -29, -1, 30, 7, -31, -13, -65, 33, 28, 31, -39, 22, -34, -27, 5, -3, -56, -1, 10, -16, -41, -34, 43, -25, -6, 28, -48, -1, -51, 6, 9, -38, -18, 1, -30, -33, -4, 28, -13, 53, 17, -24, -12, -9, -27, -29, 35, -4, -34, 3, 14, 42, 8, -36, -37, 34, 41, -44, 15, 47, -27, 3, -51, -57, 35, -42, -23, 13, 13, -24, 47, -23, -12, -4, -61, 18, -27, -23, -31, 4, -36, -6, 35, -27, -64, 32, 10, 51, -33, -52, 22, 8, -61, -59, -18, 19, 40, -40, 8, 23, -12, 14, 17, -58, 9, -64, -30, 22, -2, -34, -3, 28, 22, 19, -12, -69, -29, -62, 8, 12, -51, -31, -2, -35, -22, 40, -9, -54, -45, 24, -18, -10, -6, -19, -28, -45, -32, 44, -35, -62, -46, -34, -59, -61, 9, -26, 45, 39, 39, 7, 8, -28, -7, -51, 55, 15, 23, -10, -14, -46, -18, -58, -40, -45, -66, 30, -2, -44, -16, -61, -44, -40, -44, -53, -19, -12, -56, -1, -29, -20, -59, 19, 34, -37, -67, 36, -22, -38, -34, -37, 24, -35, -49, 22, -55, -6, -59, 
  -39, 5, -27, -12, -44, 4, 37, -39, -29, -30, 23, -56, 36, -68, 18, -17, -7, -7, 19, -66, -40, -68, 9, 19, 22, 26, -35, -54, 2, -22, -28, 37, 1, -61, -9, 38, -33, 23, 1, -66, 32, 7, -66, 25, -25, -41, -4, -44, 41, -42, -64, 31, -58, -26, -58, 20, -4, -57, -38, 4, -56, 12, -9, 32, -20, 13, 37, -33, -12, 4, -40, 17, -46, -52, 33, 18, 16, -20, 28, -15, -52, -50, -14, -44, -25, 31, -17, 27, -64, 25, -62, -17, -11, -45, -39, -13, -20, -8, 18, 16, 30, -53, 9, 16, -49, -67, 19, 8, 21, -11, 9, -54, 29, 12, -25, 37, 6, -59, -44, 0, -11, -57, 24, -7, -64, -48, -50, -68, 28, -4, 11, -59, -37, 16, 29, -52, -47, 31, 29, 15, 2, 43, 26, 32, -17, -45, -7, -40, -22, -18, 0, -67, -8, -56, -33, -44, -6, 22, -35, 31, -36, -51, -61, 41, 18, 39, 14, -59, -51, -45, -66, -5, -42, -55, 21, -41, 30, -22, -21, -25, -61, -12, 10, 19, -30, 16, -67, -57, -46, 53, 26, 23, 11, 9, -45, 40, -45, 15, 2, -14, -10, 3, -64, -44, -9, 47, -55, -9, 7, 40, -38, -26, -61, -36, -52, 24, -37, -34, 13, -44, -64, 41, -14, 8, -4, 8, 8, -60, -12, -17, 14, -39, -28, 3, -27, -32, 5, -15, -43, -60, -7, 14, -61, 31, 25, 20, -25, 36, -54, -39, -32, -64, -62, -49, 34, -28, -42, -37, 40, 14, -28, 8, -13, -36, 33, 1, -68, -8, -45, -5, -23, 37, -10, -16, -19, 7, 37, -63, -42, 28, -40, -62, 18, 39, 28, 34, -30, -29, -36, -63, -38, -59, 13, -32, 8, -21, 19, -36, 13, -28, -68, -29, -13, 4, -1, -62, 16, -67, -20, -6, -52, -57, -38, -63, 40, -9, -63, -30, -9, 1, 33, 14, -11, -17, 20, 23, 23, -12, 1, -42, -66, 9, 26, -29, -53, -8, -64, 60, -4, -15, -36, -55, 1, -38, -33, -33, -16, -51, -11, 1, -19, -18, -22, 15, -27, -48, -57, -53, -3, -66, -24, -66, 41, -65, 23, -1, 18, 29, 0, -55, -24, -9, -30, -14, -6, -38, -59, -44, -10, -34, 18, -34, -34, 29, -53, 30, -11, -21, 39, 37, 23, -35, -42, 5, -53, 14, -10, 9, 29, 7, 
  -24, 35, -6, 25, -51, 36, -37, 41, 14, -46, -28, 12, -4, 52, 30, -24, -24, 43, 25, -10, -52, 12, 6, 10, 13, -14, -28, -17, 51, 4, -17, -24, 18, 36, 20, 13, -31, -55, -25, -23, -69, -18, -43, -64, 15, 19, -22, -50, -33, -10, 22, -41, 1, 24, 19, 36, 40, 35, -1, -37, -21, 0, -22, -32, -35, -40, -48, 4, -7, -41, 24, 45, -29, -29, -12, 40, 17, 32, 6, -61, -20, 21, -21, -21, -2, 12, -19, -34, -49, 51, -7, 6, 1, -9, -63, -32, 1, -4, -36, -37, -34, 36, -36, -11, -13, 31, -65, -3, -11, -36, -26, 1, -50, -47, -28, -40, -55, 5, 37, -30, 35, 14, 1, -59, -21, 13, -4, 39, -37, -53, -24, -62, 3, -1, -30, -32, -40, -65, 15, -49, -41, 23, -18, -55, 6, 18, 18, -34, -16, -66, -30, 22, -27, -31, -59, 30, -29, 1, 33, -61, -19, 42, 35, -63, -60, -1, -3, -63, 31, 1, 8, -38, -27, -2, -58, 32, -55, -13, -31, -65, 33, -42, -67, 24, -14, -49, 9, -21, 2, 11, 26, -43, -21, -11, -56, -5, 48, -30, 8, 14, 25, 1, -55, 15, -42, -36, 8, 38, -28, -29, -39, 3, -61, -48, -52, -4, -26, -10, 0, 51, -44, -36, -10, -12, -17, -26, 52, -30, 40, -30, -16, -6, -7, -42, 23, -7, -10, -52, -30, -11, -10, 13, 35, -44, -43, 3, -6, 20, -68, -19, -24, -8, 33, 6, 50, 16, -52, 5, -29, 24, 20, -35, 22, -52, -51, -3, 55, 31, -52, -55, 20, -18, 5, -33, 21, -12, -34, -47, -3, -26, -53, 25, -8, 30, 13, -3, -18, 24, -19, -63, 21, -57, 28, 17, -57, 26, 21, -60, 1, -56, -43, -41, -2, -42, 38, -43, -2, 31, -11, -30, -48, -58, -46, -60, -17, -10, 34, -45, 16, 35, -23, 1, 6, -64, -21, 11, 3, 17, 23, -63, 21, 2, 17, -20, -30, 22, 30, 25, -40, 39, -38, 12, -55, 51, -62, 25, 3, -64, -28, -25, 23, -43, -35, -40, 21, 7, -59, 40, -5, 44, -39, -33, -63, -28, -56, 8, -41, 37, -34, -5, -1, 4, 17, -49, 36, -40, -29, 7, -60, 10, -45, 37, -57, -37, -9, 25, 44, -51, -43, -32, 18, -1, -32, 19, -60, -68, 24, 40, -41, 37, 
  -36, 49, 21, 13, 26, -41, 20, -62, -37, -62, -15, -5, -10, -41, 3, -20, 53, -25, 68, 22, 57, 3, -11, 24, 60, -24, -4, 25, 24, 51, 61, -6, 25, -3, -29, -14, 54, 36, -7, -10, 54, 31, -22, 21, -4, -38, 44, 51, 60, -17, 20, -50, -42, 33, -12, 16, 12, 28, -53, -14, -43, -6, -31, -6, -36, -15, 47, 7, 47, -23, 76, 12, 10, 39, -39, -23, 17, 4, 22, 80, -27, -7, -7, 52, 23, -2, 42, 37, 26, -32, 65, 45, 55, -33, -18, -51, 65, 32, 30, -38, -53, -35, -76, -17, 28, -36, 1, 26, 6, 21, -46, 7, -44, 8, -70, 51, 32, 2, 17, 9, 21, 6, -56, 59, -12, 29, -53, 38, -46, -34, -34, 13, 39, -72, -6, 48, 11, -1, -22, 24, -20, -28, 53, -18, -53, -50, -63, -56, 25, 43, -7, -2, 47, 28, -15, 35, 1, -1, -32, -55, -9, -22, 31, -3, 2, 56, -44, 44, 30, 25, -49, 0, 40, 8, 8, -26, 36, -26, 3, 12, -3, 55, 14, -32, -1, 49, 75, 49, -2, 55, -7, 37, -20, -30, -26, 18, 26, -34, -50, 23, 39, 6, 3, -4, 54, 32, -33, 44, -26, -29, -30, -16, -27, -7, -30, -24, 24, -25, -17, -33, 63, -9, -22, -59, -27, -50, 26, -17, -29, 48, 9, 58, -29, -23, 43, 56, 45, -13, -39, -10, 11, 16, 20, 46, -31, 59, -14, -14, 39, -51, -17, -48, -11, 25, -82, -21, -30, 59, -14, 54, -4, -34, 25, 28, -25, -61, 20, -30, 13, -17, -52, -11, 25, -12, -14, 61, 7, 8, -54, -5, -24, -57, 34, -30, 50, 0, 8, -18, 55, 38, -68, 49, 54, 22, 62, 8, -38, -2, 16, 39, 7, -87, -9, -17, 22, -25, -45, 38, -13, 13, 81, -14, 28, 4, -24, 14, -26, -52, 28, -11, 69, 70, -24, -32, -31, 31, -36, 72, 34, 63, 33, 11, -43, -61, 9, -40, 27, -15, 23, 61, 16, 40, 36, -34, -64, -14, -21, 60, -50, 18, 3, 35, 17, 14, -35, -38, 9, 39, -5, -39, -46, -27, -9, 17, -34, -29, -20, 1, 15, -27, 4, -74, -33, -65, -45, -28, -55, -40, -34, -11, 14, -30, 27, 37, -23, 26, -22, -38, 27, -3, -8, -1, 28, 19, 19, -49, 36, -36, 4, 2, 
};
const TfArray<2, int> tensor_dimension10 = { 2, { 32,400 } };
const TfArray<1, float> quant10_scale = { 1, { 0.0021349166054278612, } };
const TfArray<1, int> quant10_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int32_t tensor_data11[32] = { -48, -621, -592, 362, -585, 405, -549, -593, 270, -836, -446, -593, -540, -172, -31, -116, -322, -593, 0, -811, 111, -705, 240, -275, -527, 553, 193, -593, -592, -593, -592, 133, };
const TfArray<1, int> tensor_dimension11 = { 1, { 32 } };
const TfArray<1, float> quant11_scale = { 1, { 5.048071761848405e-05, } };
const TfArray<1, int> quant11_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int8_t tensor_data12[16*32] = { 
  39, -30, 69, -28, -15, 69, 90, 34, -28, -73, -31, -87, -39, 22, -60, -44, 36, 43, 24, 25, -27, -61, -57, 9, -26, 1, 83, -51, -75, 64, -82, 11, 
  -6, -77, 21, -70, 63, -65, -50, -54, 22, -73, 36, -54, -52, -52, -81, -11, -66, 45, 75, -28, 84, 94, 66, -42, -22, 102, 79, -5, -67, -34, -19, 25, 
  -56, 9, 15, -30, -26, -69, 78, -35, -27, 20, -95, 80, -23, 81, -42, -26, -23, 53, 3, 42, -59, -2, -98, 69, 22, 26, 26, 43, 43, -82, -43, 32, 
  13, 38, -52, -90, 11, 51, -40, -47, 62, 63, 35, -8, -68, -98, -85, -7, -12, 74, -42, 58, -38, -47, -91, 34, -79, -40, 2, 68, -24, 3, 29, -71, 
  78, -80, -45, 96, -2, -9, 13, -90, 75, 10, 2, -18, -76, 75, -50, -62, 77, 14, -2, -16, -1, -9, 85, 11, -47, 64, -19, 33, -13, 76, -63, -62, 
  -86, -97, -8, -49, 84, -80, 69, 32, -52, 12, 60, 66, 54, 95, 11, -71, 82, 60, 21, -52, -47, 44, -39, -49, -19, -20, -49, -87, 34, 30, 30, 36, 
  -32, -87, -42, 39, 17, 37, 56, -82, 99, -4, -69, 0, 77, -28, 7, -41, -85, 24, -74, -41, -52, -70, 13, -32, -35, 88, -59, 29, 30, -3, 17, -40, 
  67, 3, -70, -73, -11, -8, -71, 17, -56, -19, -33, 27, 40, 73, 44, 55, 63, 62, 60, -48, -67, 14, 66, -79, 2, 95, -65, -40, 20, -25, -18, 23, 
  -67, 56, -73, 73, -28, -53, -64, -74, -76, -42, -99, 16, -65, -109, -18, 49, -61, -16, -68, 18, -7, 49, 10, -77, -82, 83, 44, -36, 73, 77, -18, 7, 
  15, 22, -60, -82, -54, -48, 15, 21, -85, -31, 48, -25, 44, -70, 10, -52, 56, 77, 57, 32, -50, -24, 51, 77, 29, -36, -36, 54, -97, -29, 20, -11, 
  -70, -74, 59, 9, -29, 9, 12, 53, -47, -82, 29, 44, -44, 2, 81, -40, -71, 69, -35, -34, 13, -96, -72, 110, -13, -22, 20, 10, -35, 14, 5, -23, 
  47, -30, -66, -77, 80, -74, -56, -14, -23, -9, -64, 42, -56, -16, 13, 39, -21, -58, 40, -16, 42, 9, -50, -27, -16, 14, 91, -16, 34, 11, 81, -17, 
  -38, 66, 54, -43, 47, -88, 33, 21, 87, -79, 34, -9, 45, -22, 57, -64, -15, 88, -8, -35, 9, 65, -29, -50, -69, 32, 59, -30, 33, -30, 90, 60, 
  -54, 33, 15, 85, 9, 7, -70, -44, -43, -8, 92, -18, 48, 76, -81, -22, 22, -33, 80, -53, -83, 45, -22, -4, 11, -80, 71, -60, 26, 96, -19, -42, 
  -104, -14, -9, 127, 11, 68, 55, -67, -5, -76, 42, 6, 35, 61, 109, 85, 48, -16, -9, 67, -17, 19, 12, 50, -39, 87, -24, 49, -52, -89, 0, -46, 
  -80, -42, 46, -92, 2, 1, 20, -27, 19, -11, 1, -83, -82, -18, -48, -25, -41, -87, 64, -25, 16, 12, 66, 42, 41, -37, -4, -70, 29, -89, -55, -53, 
};
const TfArray<2, int> tensor_dimension12 = { 2, { 16,32 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0039185583591461182, } };
const TfArray<1, int> quant12_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int32_t tensor_data13[16] = { 165, 244, 51, -260, 180, -195, 267, 54, -36, -104, 214, 199, 55, -132, 7, -199, };
const TfArray<1, int> tensor_dimension13 = { 1, { 16 } };
const TfArray<1, float> quant13_scale = { 1, { 0.00016671480261720717, } };
const TfArray<1, int> quant13_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int8_t tensor_data14[6*16] = { 
  -69, -88, -53, -78, 68, 1, -25, -66, -63, -93, 122, -46, 61, 40, 98, 93, 
  -79, 92, 14, -72, 99, 14, -39, 57, -21, 65, 66, 83, -44, -17, -38, 60, 
  108, 55, 37, -62, 102, -71, 47, -70, -16, -53, -28, -86, -37, 43, -49, 7, 
  -113, 64, -47, -79, -26, -89, 119, 39, 102, 17, -88, -65, 18, -127, 41, -69, 
  0, 89, 4, -35, -93, 28, -79, 15, 82, 45, 4, 53, 81, 72, 36, 16, 
  -1, -58, 116, 91, -15, 96, -86, 52, 15, -107, 106, -2, 0, -59, 101, 27, 
};
const TfArray<2, int> tensor_dimension14 = { 2, { 6,16 } };
const TfArray<1, float> quant14_scale = { 1, { 0.0048302444629371166, } };
const TfArray<1, int> quant14_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int32_t tensor_data15[6] = { 784, -149, -95, 817, -472, -285, };
const TfArray<1, int> tensor_dimension15 = { 1, { 6 } };
const TfArray<1, float> quant15_scale = { 1, { 0.00015474579413421452, } };
const TfArray<1, int> quant15_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,100,13 } };
const TfArray<1, float> quant16_scale = { 1, { 0.037322930991649628, } };
const TfArray<1, int> quant16_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,100,8 } };
const TfArray<1, float> quant17_scale = { 1, { 0.024337649345397949, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,100,1,8 } };
const TfArray<1, float> quant18_scale = { 1, { 0.024337649345397949, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,50,1,8 } };
const TfArray<1, float> quant19_scale = { 1, { 0.024337649345397949, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<4, int> tensor_dimension20 = { 4, { 1,1,50,8 } };
const TfArray<1, float> quant20_scale = { 1, { 0.024337649345397949, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<4, int> tensor_dimension21 = { 4, { 1,1,50,16 } };
const TfArray<1, float> quant21_scale = { 1, { 0.023645287379622459, } };
const TfArray<1, int> quant21_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<4, int> tensor_dimension22 = { 4, { 1,50,1,16 } };
const TfArray<1, float> quant22_scale = { 1, { 0.023645287379622459, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfArray<4, int> tensor_dimension23 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant23_scale = { 1, { 0.023645287379622459, } };
const TfArray<1, int> quant23_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const TfArray<2, int> tensor_dimension24 = { 2, { 1,400 } };
const TfArray<1, float> quant24_scale = { 1, { 0.023645287379622459, } };
const TfArray<1, int> quant24_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const TfArray<2, int> tensor_dimension25 = { 2, { 1,32 } };
const TfArray<1, float> quant25_scale = { 1, { 0.042544931173324585, } };
const TfArray<1, int> quant25_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const TfArray<2, int> tensor_dimension26 = { 2, { 1,16 } };
const TfArray<1, float> quant26_scale = { 1, { 0.03203684464097023, } };
const TfArray<1, int> quant26_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const TfArray<2, int> tensor_dimension27 = { 2, { 1,6 } };
const TfArray<1, float> quant27_scale = { 1, { 0.04001723974943161, } };
const TfArray<1, int> quant27_zero = { 1, { -50 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const TfArray<2, int> tensor_dimension28 = { 2, { 1,6 } };
const TfArray<1, float> quant28_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant28_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 16 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 16,6,7 } };
const TfArray<1, int> outputs1 = { 1, { 17 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 17,2 } };
const TfArray<1, int> outputs2 = { 1, { 18 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 18 } };
const TfArray<1, int> outputs3 = { 1, { 19 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 19,3 } };
const TfArray<1, int> outputs4 = { 1, { 20 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 20,8,9 } };
const TfArray<1, int> outputs5 = { 1, { 21 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 21,4 } };
const TfArray<1, int> outputs6 = { 1, { 22 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 22 } };
const TfArray<1, int> outputs7 = { 1, { 23 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 23,5 } };
const TfArray<1, int> outputs8 = { 1, { 24 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 24,10,11 } };
const TfArray<1, int> outputs9 = { 1, { 25 } };
const TfLiteFullyConnectedParams opdata10 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs10 = { 3, { 25,12,13 } };
const TfArray<1, int> outputs10 = { 1, { 26 } };
const TfLiteFullyConnectedParams opdata11 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs11 = { 3, { 26,14,15 } };
const TfArray<1, int> outputs11 = { 1, { 27 } };
const TfLiteSoftmaxParams opdata12 = { 1 };
const TfArray<1, int> inputs12 = { 1, { 27 } };
const TfArray<1, int> outputs12 = { 1, { 28 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1312, (TfLiteIntArray*)&tensor_dimension0, 1300, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 312, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 24, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 1300, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1312, (TfLiteIntArray*)&tensor_dimension17, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension19, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension21, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension23, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension24, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension25, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension26, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension27, 6, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension28, 6, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 29;
  for (size_t i = 0; i < 29; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 13; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 13; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  28, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 13; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
